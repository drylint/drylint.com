(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{391:function(t,v,_){"use strict";_.r(v);var s=_(6),a=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),v("p",[t._v("对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：")]),t._v(" "),v("h2",{attrs:{id:"字符串类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[t._v("#")]),t._v(" 字符串类型")]),t._v(" "),v("p",[t._v("MySQL 中的一些特殊符号不能直接输入使用，需要将其进行转义，在字符前加上反斜线 "),v("code",[t._v("\\")]),t._v(" ，这些特殊字符成为转义字符。")]),t._v(" "),v("p",[t._v("转义字符有单引号("),v("code",[t._v("'")]),t._v(")、双引号("),v("code",[t._v('"')]),t._v(")、反斜线("),v("code",[t._v("\\")]),t._v(")，回车符("),v("code",[t._v("\\r")]),t._v(")，换行符("),v("code",[t._v("\\n")]),t._v(")，制表符("),v("code",[t._v("\\tab")]),t._v(")，退格符("),v("code",[t._v("\\b")]),t._v(") 等")]),t._v(" "),v("p",[t._v("在 Windows 平台下，MySQL 是不区分大小写的，因此字符串比较函数也不区分大小写。如果想执行区分大小写的比较，可以在字符串前面添加 "),v("code",[t._v("BINARY")]),t._v(" 关键字。例如，默认情况下，'a' = 'A' 的返回结果为 1，如果使用 "),v("code",[t._v("BINARY")]),t._v(" 关键字，即 "),v("code",[t._v("BINARY 'a' = 'A'")]),t._v(" ，则结果为 "),v("code",[t._v("0")]),t._v(" 。在区分大小写的情况下，'a' 与 'A' 并不相同。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("CHAR(n)")])]),t._v(" "),v("td",[t._v("定长字符串，占 n 字节，n 取值为 "),v("code",[t._v("1 ~ 255")]),t._v(" ，n 必须在表创建时指定，否则默认为 "),v("code",[t._v("1")]),t._v("，长度不够时右侧补充空格（查询时会自动去除空格）。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("VARCHAR(n)")])]),t._v(" "),v("td",[t._v("变长字符串，占 "),v("code",[t._v("实际字符数 + 1")]),t._v(" 字节，n 取值为 "),v("code",[t._v("0 ~ 65535")]),t._v("，utf8 最大为 "),v("code",[t._v("21844")]),t._v(" 个字符，gbk 最大为 "),v("code",[t._v("32766")]),t._v(" 个字符，latin1 最大为 "),v("code",[t._v("65532")]),t._v(" 个字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("TINYTEXT")])]),t._v(" "),v("td",[t._v("文本，占 "),v("code",[t._v("实际字符数 + 1")]),t._v(" 字节，最大长度为 255(2**8 - 1) 个字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("TEXT")])]),t._v(" "),v("td",[t._v("文本，占 "),v("code",[t._v("实际字符数 + 2")]),t._v(" 字节，最大长度为 65535(2**16 - 1) 个字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("MEDIUMTEXT")])]),t._v(" "),v("td",[t._v("文本，占 "),v("code",[t._v("实际字符数 + 3")]),t._v(" 字节，最大长度为 16777215(2**24 - 1) 个字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("LONGTEXT")])]),t._v(" "),v("td",[t._v("文本，占 "),v("code",[t._v("实际字符数 + 4")]),t._v(" 字节，最大长度为 4294967295(2**32 - 1) 个字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("ENUM")])]),t._v(" "),v("td",[t._v("枚举类型，占 1 或 2 字节，取决于枚举值数目(最大 "),v("code",[t._v("65535")]),t._v(")")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("SET")])]),t._v(" "),v("td",[t._v("一个设置，字符串对象可以有 0 或 多个 SET 成员，占 "),v("code",[t._v("1 | 2 | 3 | 4 | 8")]),t._v(" 个字节，取决于集合成员的数量（最多 64 个成员）")])])])]),t._v(" "),v("p",[t._v("不管使用何种形式的串数据类型，串值都必须括在引号内（通常单引号更好）。")]),t._v(" "),v("p",[t._v("电话号码，邮政编码等纯数字类型的值，虽然是纯数字组成，但他们的值不会用于数学计算，因此用字符串更合适，而不是用数值类型。")]),t._v(" "),v("p",[t._v("既然变长数据类型很灵活，为什么还要使用定长数据类型？回答是因为性能。MySQL处理定长列远比处理变长列快得多。此外，MySQL不允许对变长列（或一个列的可变部分）进行索引。这也会极大地影响性能。")]),t._v(" "),v("p",[t._v("CHAR 和 VARCHAR 存储区别（使用 "),v("code",[t._v("x")]),t._v(" 表示空格）：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("插入值")]),t._v(" "),v("th",[t._v("CHAR(4)")]),t._v(" "),v("th",[t._v("VARCHAR(4)")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("``")]),t._v(" "),v("td",[v("code",[t._v("xxxx")]),t._v(", 4 字节")]),t._v(" "),v("td",[t._v("``, 1 字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("ab")])]),t._v(" "),v("td",[v("code",[t._v("abxx")]),t._v(", 4 字节")]),t._v(" "),v("td",[v("code",[t._v("ab")]),t._v(", 3 字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("abc")])]),t._v(" "),v("td",[v("code",[t._v("abcx")]),t._v(", 4 字节")]),t._v(" "),v("td",[v("code",[t._v("abc")]),t._v(", 4 字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("abcd")])]),t._v(" "),v("td",[v("code",[t._v("abcd")]),t._v(", 4 字节")]),t._v(" "),v("td",[v("code",[t._v("abcd")]),t._v(", 5字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("abcdef")])]),t._v(" "),v("td",[v("code",[t._v("abcd")]),t._v(", 4 字节，严格模式报错")]),t._v(" "),v("td",[v("code",[t._v("abcd")]),t._v(", 5字节，严格模式报错")])])])]),t._v(" "),v("p",[t._v("存储引擎对于选择 "),v("code",[t._v("CHAR")]),t._v(" 和 "),v("code",[t._v("VARCHAR")]),t._v(" 的影响:")]),t._v(" "),v("ul",[v("li",[t._v("对于 MyISAM 存储引擎:最好使用固定长度的数据列代替可变长度的数据列。这样可以\n使整个表静态化，从而使数据检索更快，用空间换时间。")]),t._v(" "),v("li",[t._v("对于 InnoDB 存储引擎:使用可变长度的数据列，因为 InnoDB 数据表的存储格式不分固定长度和可变长度，因此使用 CHAR 不一定比使用 VARCHAR 更好，但由于 VARCHAR是按照实际的长度存储的，比较节省空间，所以对磁盘I/O 和数据存储总量比较好。")])]),t._v(" "),v("h3",{attrs:{id:"enum-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#enum-类型"}},[t._v("#")]),t._v(" ENUM 类型")]),t._v(" "),v("p",[t._v("ENUM 是一个字符串对象，其值为表创建时在列规定中枚举的列值之一。")]),t._v(" "),v("p",[t._v("语法：")]),t._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENUM")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<值1>'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<值2>'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<值n>'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br")])]),v("p",[t._v("枚举类型的列值只能在指定的若干个值之中取一个值，或者是这个值对应的索引值（从第一个值为 "),v("code",[t._v("1")]),t._v(" 开始）。每个成员的尾部空格会被移除。")]),t._v(" "),v("p",[t._v("比如性别一列使用 "),v("code",[t._v("gender ENUM('男', '女', '保密')")]),t._v(" 定义后，插入或修改数据时，只能插入 "),v("code",[t._v("'男', 1, '女', 2, '保密', 3")]),t._v(" 其中之一，允许为 "),v("code",[t._v("NULL")]),t._v(" 时还可以插入 "),v("code",[t._v("NULL")]),t._v(" 。")]),t._v(" "),v("p",[t._v("ENUM 类型的列在插入时及时不指定值，也始终会有一个默认值，允许为 "),v("code",[t._v("NULL")]),t._v(" 时，默认值为 "),v("code",[t._v("NULL")]),t._v("，设为 "),v("code",[t._v("NOT NULL")]),t._v(" 时，默认为枚举集合的第一个元素。")]),t._v(" "),v("h3",{attrs:{id:"set-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set-类型"}},[t._v("#")]),t._v(" SET 类型")]),t._v(" "),v("p",[t._v("SET 类型和 ENUM 类似，定义的方式是一样的，区别是，ENUM 列只能插入枚举值成员的其中一个值， SET 列可以插入集合中的多个值的联合。")]),t._v(" "),v("p",[t._v("如果插入的列值中有重复值，会自动删除重复的值，插入值的顺序不重要，会自动按照 SET 定义值的顺序来存储，插入了不在 SET 集合成员中的值时，会被阻止并报错。")]),t._v(" "),v("p",[t._v("语法：")]),t._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<值1>'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<值2>'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<值n>'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br")])]),v("p",[t._v("示例：")]),t._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" test "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  col "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br")])]),v("p",[t._v("插入数据")]),t._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" test "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a,b,a'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c,a,d'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("上例插入数据后，查询结果，第一行为 "),v("code",[t._v("a")]),t._v("，第二行为 "),v("code",[t._v("a,b")]),t._v("，第三行为 "),v("code",[t._v("a,c,d")]),t._v(" 。可见第二行被去除了重复值，第三行被自动按定义顺序排列。")]),t._v(" "),v("p",[t._v("再插入一行包含集合成员之外的值：")]),t._v(" "),v("div",{staticClass:"language-sql line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" test "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a,x,b,y'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("上例插入值中的包含集合成员之外的值 "),v("code",[t._v("x")]),t._v(" 和 "),v("code",[t._v("y")]),t._v(", 所以插入失败，抛出错误。")]),t._v(" "),v("h3",{attrs:{id:"enum-和-set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#enum-和-set"}},[t._v("#")]),t._v(" ENUM 和 SET")]),t._v(" "),v("p",[t._v("在多个值中，只能选择一个值，比如性别，使用 ENUM")]),t._v(" "),v("p",[t._v("在多个值中，选择多个值，比如兴趣爱好，使用 SET")]),t._v(" "),v("h2",{attrs:{id:"数值类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数值类型"}},[t._v("#")]),t._v(" 数值类型")]),t._v(" "),v("p",[t._v("有符号值，可以存储 "),v("code",[t._v("-n ~ n")]),t._v(" 范围内的值，使用 "),v("code",[t._v("UNSIGNED")]),t._v(" 表示使用无符号值后，只有正值，范围为 "),v("code",[t._v("0 ~ 2n")]),t._v("。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("TINYINT(4)")])]),t._v(" "),v("td",[t._v("整数值，占 1 字节存储，支持 "),v("code",[t._v("-128 ~ 127")]),t._v("（无符号为 "),v("code",[t._v("0 ~ 255")]),t._v("）的数")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("SMALLINT(6)")])]),t._v(" "),v("td",[t._v("整数值，占 2 字节存储，支持 "),v("code",[t._v("-32768 ~ 32767")]),t._v("（无符号为 "),v("code",[t._v("0 ~ 65535")]),t._v("）的数")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("MEDIUMINT(9)")])]),t._v(" "),v("td",[t._v("整数值，占 3 字节存储，支持 "),v("code",[t._v("-8388608 ~ 8388607")]),t._v("（无符号为 "),v("code",[t._v("0 ~ 16777215")]),t._v("）的数")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("INT(11) （或INTEGER）")])]),t._v(" "),v("td",[t._v("整数值，占 4 字节存储，支持 "),v("code",[t._v("-2147483648 ~ 2147483647")]),t._v(" (无符号为 "),v("code",[t._v("0 ~ 4294967295")]),t._v(") 的数")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("BIGINT(20)")])]),t._v(" "),v("td",[t._v("整数值，占 8 字节存储，支持 "),v("code",[t._v("-9223372036854775808 ~ 9223372036854775807")]),t._v(" 无符号为 "),v("code",[t._v("0 ~ 18446744073709551615")]),t._v("）的数")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("BOOLEAN（或BOOL）")])]),t._v(" "),v("td",[t._v("布尔值，取值为 "),v("code",[t._v("0 | 1")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("DECIMAL(m, d)（或DEC）")])]),t._v(" "),v("td",[t._v("定点数类型，占 m + 2 字节，m 表示精度（总位数），d 表示标度（小数位数），默认 "),v("code",[t._v("DECIMAL(10, 0)")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("FLOAT")])]),t._v(" "),v("td",[t._v("单精度浮点值，占 4 字节， 支持 "),v("code",[t._v("-3.402823466E+38 ~ -1.175494351E-38")]),t._v("(无符号为 0 和 "),v("code",[t._v("1.175494351E-38 ~ 3.402823466E+38")]),t._v(")")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("DOUBLE")])]),t._v(" "),v("td",[t._v("双精度浮点值，占 8 字节， 支持 "),v("code",[t._v("-1.7976931348623157E+308 ~ -2.2250738585072014E-308")]),t._v(" (无符号为 0 和 "),v("code",[t._v("2.2250738585072014E-308 ~ 1.7976931348623157E+308")]),t._v(")")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("REAL")])]),t._v(" "),v("td",[t._v("4 字节的浮点值")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("BIT")])]),t._v(" "),v("td",[t._v("位字段，1 ~ 64位。在MySQL 5之前，BIT在功能上等价于 "),v("code",[t._v("TINYINT")])])])])]),t._v(" "),v("p",[t._v("整数类型括号中的数字是不指定显示宽度时的默认值，显示宽度和数据类型取值范围无关，显示宽度仅用于指明 MySQL 最大可能显示的数字个数，并不会限制取值范围和占用空间大小。位数不够时会由空格填充，位数超过时依然可以正常插入，且能够显示出来，比如对 "),v("code",[t._v("INT(4)")]),t._v(" 类型的字段插入值 "),v("code",[t._v("19999")]),t._v(" ，查询时显示地就是 5 位数的值。")]),t._v(" "),v("p",[t._v("定点数类型和浮点数类型，如果指定的精度超出精度范围，则会四舍五入。")]),t._v(" "),v("p",[t._v("在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候(如货币、科学数据等)，使用 "),v("code",[t._v("DECIMAL")]),t._v(" 的类型比较好，另外两个浮点数进行减法和比较运算时容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。")]),t._v(" "),v("p",[t._v("上面的表中列举了最常用的数据类型。很多数据类型还有别名，例如， "),v("code",[t._v("REAL")]),t._v(" 又可以写成 "),v("code",[t._v("FLOAT(24)")]),t._v(" 。各数据库厂商还会支持特定的数据类型，例如 "),v("code",[t._v("JSON")]),t._v(" 。")]),t._v(" "),v("h2",{attrs:{id:"日期类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#日期类型"}},[t._v("#")]),t._v(" 日期类型")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("DATE")])]),t._v(" "),v("td",[t._v("占 3 字节，格式为 "),v("code",[t._v("YYYY-MM-DD")]),t._v(", 范围 "),v("code",[t._v("1000-01-01 ~ 9999-12-31")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("TIME")])]),t._v(" "),v("td",[t._v("时分秒，占 3 字节，范围是 "),v("code",[t._v("-838:59:59 ~ 838:59:59")]),t._v(",  格式为 HH:MM:SS")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("DATETIME")])]),t._v(" "),v("td",[t._v("占 8 字节，DATE 和 TIME的组合，格式为 "),v("code",[t._v("YYYY-MM-DD HH:MM:SS")]),t._v(", 范围 "),v("code",[t._v("1000-01-01 00:00:00 ~ 9999-12-31 23:59:59")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("TIMESTAMP")])]),t._v(" "),v("td",[t._v("时间戳，占 4 字节，格式和 DATETIME 相同，范围 "),v("code",[t._v("1970-01-01 00:00:00 UTC ~ 2038-01-19 03:14:07 UTC")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("YEAR")])]),t._v(" "),v("td",[t._v("年，占 1 字节，用 2 位数字表示（不建议使用），范围是 "),v("code",[t._v("70（1970年） ~ 69（2069年）")]),t._v(" ，用 4 位数字表示，范围是 "),v("code",[t._v("1901年 ~ 2155")]),t._v(" 年，格式为 "),v("code",[t._v("YYYY")])])])])]),t._v(" "),v("p",[v("code",[t._v("TIMESTAMP")]),t._v(" 与 "),v("code",[t._v("DATETIME")]),t._v(" 除了存储字节和支持的范围不同外，还有一个最大的区别就是: "),v("code",[t._v("DATETIME")]),t._v(" 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关;而 "),v("code",[t._v("TIMESTAMP")]),t._v(" 值的存储是以 UTC (世界标准时间)格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。查询时，不同时区显示的时间值是不同的。")]),t._v(" "),v("h2",{attrs:{id:"二进制数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二进制数据类型"}},[t._v("#")]),t._v(" 二进制数据类型")]),t._v(" "),v("p",[t._v("二进制数据类型可存储任何数据（甚至包括二进制信息），如图像、多媒体、字处理文档等。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("BIT(M)")])]),t._v(" "),v("td",[t._v("位字段类型，大约(M+7)/8字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("BINARY(M)")])]),t._v(" "),v("td",[t._v("固定长度二进制字符串，M字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("VARBINARY(M)")])]),t._v(" "),v("td",[t._v("可变长度二进制字符串，M+1字节")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("TINYBLOB")])]),t._v(" "),v("td",[t._v("非常小的 BLOB, L+1 字节，在此 L<2^8, 最大长度为255 (2**8-1) B")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("BLOB")])]),t._v(" "),v("td",[t._v("Blob, L+2 字节，在此L<2^16， 最大长度为65535 (2**16-1) B")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("MEDIUMBLOB")])]),t._v(" "),v("td",[t._v("中等大小 Blob, L+3字节，在此L<2^24， 最大长度为16777215 (2**24-1) B")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("LONGBLOB")])]),t._v(" "),v("td",[t._v("大的 Blob, L+4字节,在此L<2^32，最大长度为4294967295 (2**32 -1) B或4GB")])])])]),t._v(" "),v("p",[t._v("虽然使用 BLOB 或者 TEXT 可以存储大容量的数据，但是对这些字段的处理会降低数据库的性能。如果并非必要，可以选择只存储文件路径。")])])}),[],!1,null,null,null);v.default=a.exports}}]);
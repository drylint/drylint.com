(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{241:function(e,t,o){"use strict";o.r(t);var a=o(6),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"git-clone-指令及所有参数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-指令及所有参数"}},[e._v("#")]),e._v(" git clone 指令及所有参数")]),e._v(" "),o("p"),o("div",{staticClass:"table-of-contents"},[o("ul",[o("li",[o("a",{attrs:{href:"#options"}},[e._v("OPTIONS")]),o("ul",[o("li",[o("a",{attrs:{href:"#l-local-从本地存储库克隆"}},[e._v("-l, --local 从本地存储库克隆")])]),o("li",[o("a",{attrs:{href:"#no-hardlinks-不要使用本地硬链接-总是复制"}},[e._v("--no-hardlinks 不要使用本地硬链接，总是复制")])]),o("li",[o("a",{attrs:{href:"#s-shared-设置为共享存储仓库"}},[e._v("-s, --shared 设置为共享存储仓库")])]),o("li",[o("a",{attrs:{href:"#reference-if-able-repository-关联仓库"}},[e._v("--reference[-if-able] "),o("repository",[e._v(" 关联仓库")])],1)]),o("li",[o("a",{attrs:{href:"#dissociate"}},[e._v("--dissociate")])]),o("li",[o("a",{attrs:{href:"#q-quiet-静默模式运行"}},[e._v("-q, --quiet 静默模式运行")])]),o("li",[o("a",{attrs:{href:"#v-verbose-更详细的运行"}},[e._v("-v, --verbose 更详细的运行")])]),o("li",[o("a",{attrs:{href:"#progress-强制报告进展过程"}},[e._v("--progress 强制报告进展过程")])]),o("li",[o("a",{attrs:{href:"#server-option-option-选择性地传输"}},[e._v("--server-option="),o("option",[e._v(" 选择性地传输")])])]),o("li",[o("a",{attrs:{href:"#n-no-checkout-不要创建检查"}},[e._v("-n, --no-checkout 不要创建检查")])]),o("li",[o("a",{attrs:{href:"#bare-创建空存储库"}},[e._v("--bare 创建空存储库")])]),o("li",[o("a",{attrs:{href:"#sparse-初始化稀疏签出文件-使其只包含文件"}},[e._v("--sparse 初始化稀疏签出文件，使其只包含文件")])]),o("li",[o("a",{attrs:{href:"#filter-filter-spec-对象过滤"}},[e._v("--filter="),o("filter-spec",[e._v(" 对象过滤")])],1)]),o("li",[o("a",{attrs:{href:"#mirror-创建一个镜像存储库-即空存储库"}},[e._v("--mirror 创建一个镜像存储库(即空存储库)")])]),o("li",[o("a",{attrs:{href:"#o-name-origin-name-使用自定义-name-代替-origin"}},[e._v("-o "),o("name",[e._v(", --origin "),o("name",[e._v(" 使用自定义 "),o("name",[e._v(" 代替 origin")])],1)],1)],1)]),o("li",[o("a",{attrs:{href:"#b-name-branch-name-指定某个分支-branch-而不是远程的-head"}},[e._v("-b "),o("name",[e._v(", --branch "),o("name",[e._v(" 指定某个分支 "),o("branch",[e._v(" 而不是远程的 HEAD")])],1)],1)],1)]),o("li",[o("a",{attrs:{href:"#u-upload-pack-upload-pack-upload-pack-远程-git-upload-pack-的路径"}},[e._v("-u "),o("upload-pack",[e._v(", --upload-pack "),o("upload-pack",[e._v(" 远程 git-upload-pack 的路径")])],1)],1)]),o("li",[o("a",{attrs:{href:"#template-template-directory-将被使用的模板的目录"}},[e._v("--template="),o("template_directory",[e._v(" 将被使用的模板的目录")])],1)]),o("li",[o("a",{attrs:{href:"#c-key-value-config-key-value-在新的仓库中设置-config"}},[e._v("-c "),o("key",[e._v("="),o("value",[e._v(", --config "),o("key",[e._v("="),o("value",[e._v(" 在新的仓库中设置 config")])],1)],1)],1)],1)]),o("li",[o("a",{attrs:{href:"#depth-depth-创造一个指定深度-depth-的浅层克隆"}},[e._v("--depth "),o("depth",[e._v(" 创造一个指定深度 "),o("depth",[e._v(" 的浅层克隆")])],1)],1)]),o("li",[o("a",{attrs:{href:"#shallow-since-date-从指定时间进行浅克隆"}},[e._v("--shallow-since="),o("date",[e._v(" 从指定时间进行浅克隆")])],1)]),o("li",[o("a",{attrs:{href:"#shallow-exclude-revision-浅克隆的历史中排除-revision"}},[e._v("--shallow-exclude="),o("revision",[e._v(" 浅克隆的历史中排除 "),o("revision")],1)],1)]),o("li",[o("a",{attrs:{href:"#no-single-branch-只克隆一个分支-head-或指定-branch-分支"}},[e._v("--[no-]single-branch 只克隆一个分支，HEAD 或指定 --branch <分支>")])]),o("li",[o("a",{attrs:{href:"#no-tags-不克隆任何-tag-标签-并使以后的取回不跟随他们"}},[e._v("--no-tags 不克隆任何 tag 标签，并使以后的取回不跟随他们")])]),o("li",[o("a",{attrs:{href:"#recurse-submodules-pathspec-初始化克隆中的子模块"}},[e._v("--recurse-submodules[="),o("pathspec",[e._v("] 初始化克隆中的子模块")])],1)]),o("li",[o("a",{attrs:{href:"#no-shallow-submodules-任何克隆的子模块都是-或不是-浅克隆"}},[e._v("--[no-]shallow-submodules 任何克隆的子模块都是（或不是）浅克隆")])]),o("li",[o("a",{attrs:{href:"#no-remote-submodules-任何克隆的子模块都使用-或不使用-它们的远程跟踪分支"}},[e._v("--[no-]remote-submodules 任何克隆的子模块都使用（或不使用）它们的远程跟踪分支")])]),o("li",[o("a",{attrs:{href:"#separate-git-dir-git-dir-将-git-目录与工作树分开"}},[e._v("--separate-git-dir="),o("git",{attrs:{dir:""}},[e._v(" 将 git 目录与工作树分开")])],1)]),o("li",[o("a",{attrs:{href:"#j-n-jobs-n-并行克隆的子模块数量"}},[e._v("-j "),o("n",[e._v(", --jobs "),o("n",[e._v(" 并行克隆的子模块数量")])],1)],1)]),o("li",[o("a",{attrs:{href:"#repository"}},[o("repository")],1)]),o("li",[o("a",{attrs:{href:"#directory"}},[o("directory")],1)])])])])]),o("p"),e._v(" "),o("p",[e._v("语法：")]),e._v(" "),o("div",{staticClass:"language-git line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-git"}},[o("code",[e._v("git clone [<options>] [--] <repository> [<directory>]\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br")])]),o("p",[o("code",[e._v("<options>")]),e._v(" 的取值：")]),e._v(" "),o("div",{staticClass:"language-git line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-git"}},[o("code",[o("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--recursive[=<pathspec>]")]),e._v("\n                      alias of --recurse-submodules\n"),o("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--dissociate          use --reference only while cloning")]),e._v("\n\n"),o("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("-4, --ipv4            use IPv4 addresses only")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("-6, --ipv6            use IPv6 addresses only")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--sparse              initialize sparse-checkout file to include only files at root")]),e._v("\n\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br"),o("span",{staticClass:"line-number"},[e._v("3")]),o("br"),o("span",{staticClass:"line-number"},[e._v("4")]),o("br"),o("span",{staticClass:"line-number"},[e._v("5")]),o("br"),o("span",{staticClass:"line-number"},[e._v("6")]),o("br"),o("span",{staticClass:"line-number"},[e._v("7")]),o("br"),o("span",{staticClass:"line-number"},[e._v("8")]),o("br")])]),o("h2",{attrs:{id:"options"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" OPTIONS")]),e._v(" "),o("h3",{attrs:{id:"l-local-从本地存储库克隆"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#l-local-从本地存储库克隆"}},[e._v("#")]),e._v(" "),o("code",[e._v("-l")]),e._v(", "),o("code",[e._v("--local")]),e._v(" 从本地存储库克隆")]),e._v(" "),o("p",[e._v('When the repository to clone from is on a local machine,\nthis flag bypasses the normal "Git aware" transport\nmechanism and clones the repository by making a copy of\nHEAD and everything under objects and refs directories.\nThe files under '),o("code",[e._v(".git/objects/")]),e._v(" directory are hardlinked\nto save space when possible.")]),e._v(" "),o("p",[e._v("If the repository is specified as a local path (e.g., "),o("code",[e._v("/path/to/repo")]),e._v("),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying "),o("code",[e._v("--no-local")]),e._v(" will\noverride the default when "),o("code",[e._v("/path/to/repo")]),e._v(" is given, using the regular\nGit transport instead.")]),e._v(" "),o("p",[o("strong",[e._v("NOTE")]),e._v(": this operation can race with concurrent modification to the\nsource repository, similar to running "),o("code",[e._v("cp -r src dst")]),e._v(" while modifying\n"),o("code",[e._v("src")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"no-hardlinks-不要使用本地硬链接-总是复制"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#no-hardlinks-不要使用本地硬链接-总是复制"}},[e._v("#")]),e._v(" "),o("code",[e._v("--no-hardlinks")]),e._v(" 不要使用本地硬链接，总是复制")]),e._v(" "),o("p",[e._v("Force the cloning process from a repository on a local\nfilesystem to copy the files under the "),o("code",[e._v(".git/objects")]),e._v("\ndirectory instead of using hardlinks. This may be desirable\nif you are trying to make a back-up of your repository.")]),e._v(" "),o("h3",{attrs:{id:"s-shared-设置为共享存储仓库"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#s-shared-设置为共享存储仓库"}},[e._v("#")]),e._v(" "),o("code",[e._v("-s")]),e._v(", "),o("code",[e._v("--shared")]),e._v(" 设置为共享存储仓库")]),e._v(" "),o("p",[e._v("When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup\n"),o("code",[e._v(".git/objects/info/alternates")]),e._v(" to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own.")]),e._v(" "),o("p",[o("strong",[e._v("NOTE")]),e._v(": this is a possibly dangerous operation; do "),o("strong",[e._v("not")]),e._v(" use\nit unless you understand what it does. If you clone your\nrepository using this option and then delete branches (or use any\nother Git command that makes any existing commit unreferenced) in the\nsource repository, some objects may become unreferenced (or dangling).\nThese objects may be removed by normal Git operations (such as "),o("code",[e._v("git commit")]),e._v(")\nwhich automatically call "),o("code",[e._v("git maintenance run --auto")]),e._v(". (See\n"),o("a",{attrs:{href:"/docs/git-maintenance"}},[e._v("git-maintenance[1]")]),e._v(".) If these objects are removed and were referenced\nby the cloned repository, then the cloned repository will become corrupt.")]),e._v(" "),o("p",[e._v("Note that running "),o("code",[e._v("git repack")]),e._v(" without the "),o("code",[e._v("--local")]),e._v(" option in a repository\ncloned with "),o("code",[e._v("--shared")]),e._v(" will copy objects from the source repository into a pack\nin the cloned repository, removing the disk space savings of "),o("code",[e._v("clone --shared")]),e._v(".\nIt is safe, however, to run "),o("code",[e._v("git gc")]),e._v(", which uses the "),o("code",[e._v("--local")]),e._v(" option by\ndefault.")]),e._v(" "),o("p",[e._v("If you want to break the dependency of a repository cloned with "),o("code",[e._v("--shared")]),e._v(" on\nits source repository, you can simply run "),o("code",[e._v("git repack -a")]),e._v(" to copy all\nobjects from the source repository into a pack in the cloned repository.")]),e._v(" "),o("h3",{attrs:{id:"reference-if-able-repository-关联仓库"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#reference-if-able-repository-关联仓库"}},[e._v("#")]),e._v(" "),o("code",[e._v("--reference[-if-able] <repository>")]),e._v(" 关联仓库")]),e._v(" "),o("p",[e._v("If the reference repository is on the local machine,\nautomatically setup "),o("code",[e._v(".git/objects/info/alternates")]),e._v(" to\nobtain objects from the reference repository.  Using\nan already existing repository as an alternate will\nrequire fewer objects to be copied from the repository\nbeing cloned, reducing network and local storage costs.\nWhen using the "),o("code",[e._v("--reference-if-able")]),e._v(", a non existing\ndirectory is skipped with a warning instead of aborting\nthe clone.")]),e._v(" "),o("p",[o("strong",[e._v("NOTE")]),e._v(": see the NOTE for the "),o("code",[e._v("--shared")]),e._v(" option, and also the\n"),o("code",[e._v("--dissociate")]),e._v(" option.")]),e._v(" "),o("h3",{attrs:{id:"dissociate"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dissociate"}},[e._v("#")]),e._v(" "),o("code",[e._v("--dissociate")])]),e._v(" "),o("p",[e._v("Borrow the objects from reference repositories specified\nwith the "),o("code",[e._v("--reference")]),e._v(" options only to reduce network\ntransfer, and stop borrowing from them after a clone is made\nby making necessary local copies of borrowed objects.  This\noption can also be used when cloning locally from a\nrepository that already borrows objects from another\nrepository—​the new repository will borrow objects from the\nsame repository, and this option can be used to stop the\nborrowing.")]),e._v(" "),o("h3",{attrs:{id:"q-quiet-静默模式运行"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-quiet-静默模式运行"}},[e._v("#")]),e._v(" "),o("code",[e._v("-q")]),e._v(", "),o("code",[e._v("--quiet")]),e._v(" 静默模式运行")]),e._v(" "),o("p",[e._v("安静地运作。不将进展过程情况报告给标准错误流。")]),e._v(" "),o("h3",{attrs:{id:"v-verbose-更详细的运行"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#v-verbose-更详细的运行"}},[e._v("#")]),e._v(" "),o("code",[e._v("-v")]),e._v(", "),o("code",[e._v("--verbose")]),e._v(" 更详细的运行")]),e._v(" "),o("p",[e._v("Run verbosely. Does not affect the reporting of progress status\nto the standard error stream.")]),e._v(" "),o("h3",{attrs:{id:"progress-强制报告进展过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#progress-强制报告进展过程"}},[e._v("#")]),e._v(" "),o("code",[e._v("--progress")]),e._v(" 强制报告进展过程")]),e._v(" "),o("p",[e._v("Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless "),o("code",[e._v("--quiet")]),e._v("\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal.")]),e._v(" "),o("h3",{attrs:{id:"server-option-option-选择性地传输"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#server-option-option-选择性地传输"}},[e._v("#")]),e._v(" "),o("code",[e._v("--server-option=<option>")]),e._v(" 选择性地传输")]),e._v(" "),o("p",[e._v("Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple "),o("code",[e._v("--server-option=<option>")]),e._v(" are given, they are all\nsent to the other side in the order listed on the command line.")]),e._v(" "),o("h3",{attrs:{id:"n-no-checkout-不要创建检查"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#n-no-checkout-不要创建检查"}},[e._v("#")]),e._v(" "),o("code",[e._v("-n")]),e._v(", "),o("code",[e._v("--no-checkout")]),e._v(" 不要创建检查")]),e._v(" "),o("p",[e._v("No checkout of HEAD is performed after the clone is complete.")]),e._v(" "),o("h3",{attrs:{id:"bare-创建空存储库"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#bare-创建空存储库"}},[e._v("#")]),e._v(" "),o("code",[e._v("--bare")]),e._v(" 创建空存储库")]),e._v(" "),o("p",[e._v("Make a "),o("em",[e._v("bare")]),e._v(" Git repository.  That is, instead of\ncreating "),o("code",[e._v("<directory>")]),e._v(" and placing the administrative\nfiles in "),o("code",[e._v("<directory>/.git")]),e._v(", make the "),o("code",[e._v("<directory>")]),e._v("\nitself the "),o("code",[e._v("$GIT_DIR")]),e._v(". This obviously implies the "),o("code",[e._v("--no-checkout")]),e._v("\nbecause there is nowhere to check out the working tree.\nAlso the branch heads at the remote are copied directly\nto corresponding local branch heads, without mapping\nthem to "),o("code",[e._v("refs/remotes/origin/")]),e._v(".  When this option is\nused, neither remote-tracking branches nor the related\nconfiguration variables are created.")]),e._v(" "),o("h3",{attrs:{id:"sparse-初始化稀疏签出文件-使其只包含文件"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#sparse-初始化稀疏签出文件-使其只包含文件"}},[e._v("#")]),e._v(" "),o("code",[e._v("--sparse")]),e._v(" 初始化稀疏签出文件，使其只包含文件")]),e._v(" "),o("p",[e._v("Initialize the sparse-checkout file so the working\ndirectory starts with only the files in the root\nof the repository. The sparse-checkout file can be\nmodified to grow the working directory as needed.")]),e._v(" "),o("h3",{attrs:{id:"filter-filter-spec-对象过滤"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#filter-filter-spec-对象过滤"}},[e._v("#")]),e._v(" "),o("code",[e._v("--filter=<filter-spec>")]),e._v(" 对象过滤")]),e._v(" "),o("p",[e._v("Use the partial clone feature and request that the server sends\na subset of reachable objects according to a given object filter.\nWhen using "),o("code",[e._v("--filter")]),e._v(", the supplied "),o("code",[e._v("<filter-spec>")]),e._v(" is used for\nthe partial clone filter. For example, "),o("code",[e._v("--filter=blob:none")]),e._v(" will\nfilter out all blobs (file contents) until needed by Git. Also,\n"),o("code",[e._v("--filter=blob:limit=<size>")]),e._v(" will filter out all blobs of size\nat least "),o("code",[e._v("<size>")]),e._v(". For more details on filter specifications, see\nthe "),o("code",[e._v("--filter")]),e._v(" option in "),o("a",{attrs:{href:"/docs/git-rev-list"}},[e._v("git-rev-list[1]")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"mirror-创建一个镜像存储库-即空存储库"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mirror-创建一个镜像存储库-即空存储库"}},[e._v("#")]),e._v(" "),o("code",[e._v("--mirror")]),e._v(" 创建一个镜像存储库(即空存储库)")]),e._v(" "),o("p",[e._v("Set up a mirror of the source repository.  This implies "),o("code",[e._v("--bare")]),e._v(".\nCompared to "),o("code",[e._v("--bare")]),e._v(", "),o("code",[e._v("--mirror")]),e._v(" not only maps local branches of the\nsource to local branches of the target, it maps all refs (including\nremote-tracking branches, notes etc.) and sets up a refspec configuration such\nthat all these refs are overwritten by a "),o("code",[e._v("git remote update")]),e._v(" in the\ntarget repository.")]),e._v(" "),o("h3",{attrs:{id:"o-name-origin-name-使用自定义-name-代替-origin"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#o-name-origin-name-使用自定义-name-代替-origin"}},[e._v("#")]),e._v(" "),o("code",[e._v("-o <name>")]),e._v(", "),o("code",[e._v("--origin <name>")]),e._v(" 使用自定义 "),o("code",[e._v("<name>")]),e._v(" 代替 "),o("code",[e._v("origin")])]),e._v(" "),o("p",[e._v("Instead of using the remote name "),o("code",[e._v("origin")]),e._v(" to keep track of the upstream\nrepository, use "),o("code",[e._v("<name>")]),e._v(".  Overrides "),o("code",[e._v("clone.defaultRemoteName")]),e._v(" from the\nconfig.")]),e._v(" "),o("h3",{attrs:{id:"b-name-branch-name-指定某个分支-branch-而不是远程的-head"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#b-name-branch-name-指定某个分支-branch-而不是远程的-head"}},[e._v("#")]),e._v(" "),o("code",[e._v("-b <name>")]),e._v(", "),o("code",[e._v("--branch <name>")]),e._v(" 指定某个分支 "),o("code",[e._v("<branch>")]),e._v(" 而不是远程的 "),o("code",[e._v("HEAD")])]),e._v(" "),o("p",[e._v("Instead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to "),o("code",[e._v("<name>")]),e._v(" branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out.\n"),o("code",[e._v("--branch")]),e._v(" can also take tags and detaches the HEAD at that commit\nin the resulting repository.")]),e._v(" "),o("h3",{attrs:{id:"u-upload-pack-upload-pack-upload-pack-远程-git-upload-pack-的路径"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#u-upload-pack-upload-pack-upload-pack-远程-git-upload-pack-的路径"}},[e._v("#")]),e._v(" "),o("code",[e._v("-u <upload-pack>")]),e._v(", "),o("code",[e._v("--upload-pack <upload-pack>")]),e._v(" 远程 git-upload-pack 的路径")]),e._v(" "),o("p",[e._v("When given, and the repository to clone from is accessed\nvia ssh, this specifies a non-default path for the command\nrun on the other end.")]),e._v(" "),o("h3",{attrs:{id:"template-template-directory-将被使用的模板的目录"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#template-template-directory-将被使用的模板的目录"}},[e._v("#")]),e._v(" "),o("code",[e._v("--template=<template_directory>")]),e._v(" 将被使用的模板的目录")]),e._v(" "),o("p",[e._v('Specify the directory from which templates will be used;\n(See the "TEMPLATE DIRECTORY" section of '),o("a",{attrs:{href:"/docs/git-init"}},[e._v("git-init[1]")]),e._v(".)")]),e._v(" "),o("h3",{attrs:{id:"c-key-value-config-key-value-在新的仓库中设置-config"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#c-key-value-config-key-value-在新的仓库中设置-config"}},[e._v("#")]),e._v(" "),o("code",[e._v("-c <key>=<value>")]),e._v(", "),o("code",[e._v("--config <key>=<value>")]),e._v(" 在新的仓库中设置 config")]),e._v(" "),o("p",[e._v("Set a configuration variable in the newly-created repository;\nthis takes effect immediately after the repository is\ninitialized, but before the remote history is fetched or any\nfiles checked out.  The key is in the same format as expected by\n"),o("a",{attrs:{href:"/docs/git-config"}},[e._v("git-config[1]")]),e._v(" (e.g., "),o("code",[e._v("core.eol=true")]),e._v("). If multiple\nvalues are given for the same key, each value will be written to\nthe config file. This makes it safe, for example, to add\nadditional fetch refspecs to the origin remote.")]),e._v(" "),o("p",[e._v("Due to limitations of the current implementation, some configuration\nvariables do not take effect until after the initial fetch and checkout.\nConfiguration variables known to not take effect are:\n"),o("code",[e._v("remote.<name>.mirror")]),e._v(" and "),o("code",[e._v("remote.<name>.tagOpt")]),e._v(".  Use the\ncorresponding "),o("code",[e._v("--mirror")]),e._v(" and "),o("code",[e._v("--no-tags")]),e._v(" options instead.")]),e._v(" "),o("h3",{attrs:{id:"depth-depth-创造一个指定深度-depth-的浅层克隆"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#depth-depth-创造一个指定深度-depth-的浅层克隆"}},[e._v("#")]),e._v(" "),o("code",[e._v("--depth <depth>")]),e._v(" 创造一个指定深度 "),o("code",[e._v("<depth>")]),e._v(" 的浅层克隆")]),e._v(" "),o("p",[e._v("Create a "),o("em",[e._v("shallow")]),e._v(" clone with a history truncated to the\nspecified number of commits. Implies "),o("code",[e._v("--single-branch")]),e._v(" unless\n"),o("code",[e._v("--no-single-branch")]),e._v(" is given to fetch the histories near the\ntips of all branches. If you want to clone submodules shallowly,\nalso pass "),o("code",[e._v("--shallow-submodules")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"shallow-since-date-从指定时间进行浅克隆"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#shallow-since-date-从指定时间进行浅克隆"}},[e._v("#")]),e._v(" "),o("code",[e._v("--shallow-since=<date>")]),e._v(" 从指定时间进行浅克隆")]),e._v(" "),o("p",[e._v("Create a shallow clone with a history after the specified time.")]),e._v(" "),o("h3",{attrs:{id:"shallow-exclude-revision-浅克隆的历史中排除-revision"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#shallow-exclude-revision-浅克隆的历史中排除-revision"}},[e._v("#")]),e._v(" "),o("code",[e._v("--shallow-exclude=<revision>")]),e._v(" 浅克隆的历史中排除 "),o("code",[e._v("<revision>")])]),e._v(" "),o("p",[e._v("Create a shallow clone with a history, excluding commits\nreachable from a specified remote branch or tag.  This option\ncan be specified multiple times.")]),e._v(" "),o("h3",{attrs:{id:"no-single-branch-只克隆一个分支-head-或指定-branch-分支"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#no-single-branch-只克隆一个分支-head-或指定-branch-分支"}},[e._v("#")]),e._v(" "),o("code",[e._v("--[no-]single-branch")]),e._v(" 只克隆一个分支，"),o("code",[e._v("HEAD")]),e._v(" 或指定 "),o("code",[e._v("--branch <分支>")])]),e._v(" "),o("p",[e._v("Clone only the history leading to the tip of a single branch,\neither specified by the "),o("code",[e._v("--branch")]),e._v(" option or the primary\nbranch remote’s "),o("code",[e._v("HEAD")]),e._v(" points at.\nFurther fetches into the resulting repository will only update the\nremote-tracking branch for the branch this option was used for the\ninitial cloning.  If the HEAD at the remote did not point at any\nbranch when "),o("code",[e._v("--single-branch")]),e._v(" clone was made, no remote-tracking\nbranch is created.")]),e._v(" "),o("h3",{attrs:{id:"no-tags-不克隆任何-tag-标签-并使以后的取回不跟随他们"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#no-tags-不克隆任何-tag-标签-并使以后的取回不跟随他们"}},[e._v("#")]),e._v(" "),o("code",[e._v("--no-tags")]),e._v(" 不克隆任何 tag 标签，并使以后的取回不跟随他们")]),e._v(" "),o("p",[e._v("Don’t clone any tags, and set\n"),o("code",[e._v("remote.<remote>.tagOpt=--no-tags")]),e._v(" in the config, ensuring\nthat future "),o("code",[e._v("git pull")]),e._v(" and "),o("code",[e._v("git fetch")]),e._v(" operations won’t follow\nany tags. Subsequent explicit tag fetches will still work,\n(see "),o("a",{attrs:{href:"/docs/git-fetch"}},[e._v("git-fetch[1]")]),e._v(").")]),e._v(" "),o("p",[e._v("Can be used in conjunction with "),o("code",[e._v("--single-branch")]),e._v(" to clone and\nmaintain a branch with no references other than a single cloned\nbranch. This is useful e.g. to maintain minimal clones of the default\nbranch of some repository for search indexing.")]),e._v(" "),o("h3",{attrs:{id:"recurse-submodules-pathspec-初始化克隆中的子模块"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#recurse-submodules-pathspec-初始化克隆中的子模块"}},[e._v("#")]),e._v(" "),o("code",[e._v("--recurse-submodules[=<pathspec>]")]),e._v(" 初始化克隆中的子模块")]),e._v(" "),o("p",[e._v("After the clone is created, initialize and clone submodules\nwithin based on the provided pathspec.  If no pathspec is\nprovided, all submodules are initialized and cloned.\nThis option can be given multiple times for pathspecs consisting\nof multiple entries.  The resulting clone has "),o("code",[e._v("submodule.active")]),e._v(' set to\nthe provided pathspec, or "." (meaning all submodules) if no\npathspec is provided.')]),e._v(" "),o("p",[e._v("Submodules are initialized and cloned using their default settings. This is\nequivalent to running\n"),o("code",[e._v("git submodule update --init --recursive <pathspec>")]),e._v(" immediately after\nthe clone is finished. This option is ignored if the cloned repository does\nnot have a worktree/checkout (i.e. if any of "),o("code",[e._v("--no-checkout")]),e._v("/"),o("code",[e._v("-n")]),e._v(", "),o("code",[e._v("--bare")]),e._v(",\nor "),o("code",[e._v("--mirror")]),e._v(" is given)")]),e._v(" "),o("h3",{attrs:{id:"no-shallow-submodules-任何克隆的子模块都是-或不是-浅克隆"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#no-shallow-submodules-任何克隆的子模块都是-或不是-浅克隆"}},[e._v("#")]),e._v(" "),o("code",[e._v("--[no-]shallow-submodules")]),e._v(" 任何克隆的子模块都是（或不是）浅克隆")]),e._v(" "),o("p",[e._v("All submodules which are cloned will be shallow with a depth of 1.")]),e._v(" "),o("h3",{attrs:{id:"no-remote-submodules-任何克隆的子模块都使用-或不使用-它们的远程跟踪分支"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#no-remote-submodules-任何克隆的子模块都使用-或不使用-它们的远程跟踪分支"}},[e._v("#")]),e._v(" "),o("code",[e._v("--[no-]remote-submodules")]),e._v(" 任何克隆的子模块都使用（或不使用）它们的远程跟踪分支")]),e._v(" "),o("p",[e._v("All submodules which are cloned will use the status of the submodule’s\nremote-tracking branch to update the submodule, rather than the\nsuperproject’s recorded SHA-1. Equivalent to passing "),o("code",[e._v("--remote")]),e._v(" to\n"),o("code",[e._v("git submodule update")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"separate-git-dir-git-dir-将-git-目录与工作树分开"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#separate-git-dir-git-dir-将-git-目录与工作树分开"}},[e._v("#")]),e._v(" "),o("code",[e._v("--separate-git-dir=<git dir>")]),e._v(" 将 git 目录与工作树分开")]),e._v(" "),o("p",[e._v("Instead of placing the cloned repository where it is supposed\nto be, place the cloned repository at the specified directory,\nthen make a filesystem-agnostic Git symbolic link to there.\nThe result is Git repository can be separated from working\ntree.")]),e._v(" "),o("h3",{attrs:{id:"j-n-jobs-n-并行克隆的子模块数量"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#j-n-jobs-n-并行克隆的子模块数量"}},[e._v("#")]),e._v(" "),o("code",[e._v("-j <n>")]),e._v(", "),o("code",[e._v("--jobs <n>")]),e._v(" 并行克隆的子模块数量")]),e._v(" "),o("p",[e._v("The number of submodules fetched at the same time.\nDefaults to the "),o("code",[e._v("submodule.fetchJobs")]),e._v(" option.")]),e._v(" "),o("h3",{attrs:{id:"repository"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[e._v("#")]),e._v(" "),o("code",[e._v("<repository>")])]),e._v(" "),o("p",[e._v("The (possibly remote) repository to clone from.  See the\n"),o("a",{attrs:{href:"#URLS"}},[e._v("GIT URLS")]),e._v(" section below for more information on specifying\nrepositories.")]),e._v(" "),o("h3",{attrs:{id:"directory"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#directory"}},[e._v("#")]),e._v(" "),o("code",[e._v("<directory>")])]),e._v(" "),o("p",[e._v('The name of a new directory to clone into.  The "humanish"\npart of the source repository is used if no directory is\nexplicitly given ('),o("code",[e._v("repo")]),e._v(" for "),o("code",[e._v("/path/to/repo.git")]),e._v(" and "),o("code",[e._v("foo")]),e._v("\nfor "),o("code",[e._v("host.xz:foo/.git")]),e._v(").  Cloning into an existing directory\nis only allowed if the directory is empty.")])])}),[],!1,null,null,null);t.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{387:function(t,s,a){"use strict";a.r(s);var e=a(6),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"内置函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置函数"}},[t._v("#")]),t._v(" 内置函数")]),t._v(" "),a("h2",{attrs:{id:"系统信息函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统信息函数"}},[t._v("#")]),t._v(" 系统信息函数")]),t._v(" "),a("p",[a("code",[t._v("VERSION()")]),t._v(" 获取当前 MySQL 服务器版本号")]),t._v(" "),a("p",[a("code",[t._v("CONNECTION_ID()")]),t._v(" 获取当前 MySQL 服务器连接的次数，每个连接都有各自唯一的 ID")]),t._v(" "),a("p",[a("code",[t._v("USER()")]),t._v("、"),a("code",[t._v("CURRENT_USER")]),t._v("、"),a("code",[t._v("CURRENT_ _USER()")]),t._v("、"),a("code",[t._v("SYSTEM USER()")]),t._v(" 和"),a("code",[t._v("SESSION_ USER()")]),t._v("这几个函数返回当前被MySQL服务器验证的用户名和主机名组合。这个值符合确定当前登录用户存取权限的MySQL账户。一般情况下，这几个函数的返回值是相同的。")]),t._v(" "),a("p",[a("code",[t._v("CHARSET(string)")]),t._v(" 返回字符串使用的字符集。")]),t._v(" "),a("p",[a("code",[t._v("COLLATION(string)")]),t._v(" 返回字符串的字符排列方式。")]),t._v(" "),a("p",[a("code",[t._v("LAST_INSERT_ID()")]),t._v(" 返回最后生成的 AUTO_INCREMENT 值。")]),t._v(" "),a("h2",{attrs:{id:"加密函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加密函数"}},[t._v("#")]),t._v(" 加密函数")]),t._v(" "),a("p",[a("code",[t._v("MD5(string)")]),t._v(" 返回字符串的一个 MD5 128 bit 校验和。返回值为 32 个十六进制字符组成的字符串。")]),t._v(" "),a("p",[a("code",[t._v("SHA(string)")]),t._v(" 返回字符串加密后的字符串，40 个十六进制字符组成的字符串，加密算法比 MD5 更加安全。")]),t._v(" "),a("p",[a("code",[t._v("SHA2(string, hash_length)")]),t._v(" 使用 "),a("code",[t._v("hash_length")]),t._v(" 作为长度，对字符串进行加密。 "),a("code",[t._v("hash_length")]),t._v(" 可选值为 "),a("code",[t._v("0 | 224(56个字符) | 256(64个字符) | 384(96个字符) | 512(128个字符)")]),t._v("，其中 "),a("code",[t._v("0")]),t._v(" 等同于 "),a("code",[t._v("256")]),t._v(" 。")]),t._v(" "),a("h2",{attrs:{id:"其他函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他函数"}},[t._v("#")]),t._v(" 其他函数")]),t._v(" "),a("p",[a("code",[t._v("FORMAT(<数字>, n)")]),t._v(" 将数字格式化，并以四舍五入方式保留小数后 n 为小数，以字符串方式返回。")]),t._v(" "),a("p",[a("code",[t._v("CONV(<数字>, <原进制>, <目标进制>)")]),t._v(" 不同进制的数字进行转换。进制范围为 2 ~ 36 。")]),t._v(" "),a("p",[a("code",[t._v("INET_ATON(<IP字符串>)")]),t._v(" 将点分隔的IP地址（4或8 bit）转为一个整数。")]),t._v(" "),a("p",[a("code",[t._v("INET_NTOA(<整数>)")]),t._v(" 将整数代表的IP地址转换为点分隔的IP地址字符串。")]),t._v(" "),a("p",[a("code",[t._v("GET_LOCK(string, timeout)")]),t._v(" 使用给定的字符串得到一个锁，超时时间为 timeout 秒。成功返回 1，超时返回 0，错误返回 NULL 。执行 "),a("code",[t._v("RELEASE_LOCK()")]),t._v(" 函数或者连接断开，这个锁就会解除。")]),t._v(" "),a("p",[a("code",[t._v("RELEASE_LOCK(string)")]),t._v(" 解除通过 "),a("code",[t._v("GET_LOCK()")]),t._v(" 函数得到的锁。返回 1（成功），0（该线程尚未创建锁），NULL（锁不存在）。")]),t._v(" "),a("p",[a("code",[t._v("IS_FREE_LOCK(string)")]),t._v(" 检查指定的名为 string 的锁是否未被占用。未被占用返回 1，占用返回 0 。")]),t._v(" "),a("p",[a("code",[t._v("IS_USED_LOCK(string)")]),t._v(" 检查指定的名为 string 的锁是否被占用。占用时返回该锁的客户端连接标识符（connection ID），否则返回 NULL 。")]),t._v(" "),a("p",[a("code",[t._v("BENCHMARK(count, expr)")]),t._v(" 重复执行 count 次 expr 表达式。")]),t._v(" "),a("p",[a("code",[t._v("CONVERT('<字符串>' USING <字符编码集>)")]),t._v(" 改变字符串使用的字符集，不改变为默认使用的字符集编码。")]),t._v(" "),a("p",[a("code",[t._v("CAST(x, AS type)")]),t._v(" 和 "),a("code",[t._v("CONVERT(x, type)")]),t._v(" 将一个类型的值转换为另一个类型。type 可取值有 "),a("code",[t._v("BINARY | CHAR(n) | DATE | TIME | DATETIME | DECIMAL | SIGNED | UNSIGNED")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"窗口函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口函数"}},[t._v("#")]),t._v(" 窗口函数")]),t._v(" "),a("p",[t._v("窗口函数同时具有分组（partition by）和排序（order by）的功能，不减少原表的行数，所以经常用来在每组内排名，只能写在select子句中。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("窗口函数"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("over")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("partition")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("用于分组的列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("用于排序的列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("<窗口函数>的位置，可以放以下两种函数：")]),t._v(" "),a("ul",[a("li",[t._v("专用窗口函数，比如rank, dense_rank, row_number等")]),t._v(" "),a("li",[t._v("聚合函数，如sum. avg, count, max, min等")])]),t._v(" "),a("p",[t._v("示例，加入部门表 branch 中，有名称 name 和部门人数 brcount 字段：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询所有部门信息，并按 brcount 排序，并增加一列排序编号字段叫做 rank")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("，rank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OVER")]),t._v(" w1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" rank "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" branch\nwindow w1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" brcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在每一行数据中，添加一个字段叫做 员工总数 total_count，这个字段是所有部门人数相加所得。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("brcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("over")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" total_count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])])}),[],!1,null,null,null);s.default=_.exports}}]);
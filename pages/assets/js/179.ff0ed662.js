(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{382:function(s,t,a){"use strict";a.r(t);var e=a(6),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"查询语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询语句"}},[s._v("#")]),s._v(" 查询语句")]),s._v(" "),a("h2",{attrs:{id:"基本查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本查询"}},[s._v("#")]),s._v(" 基本查询")]),s._v(" "),a("p",[s._v("语法：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询一张表中的所有信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询一张表中的指定的某些列，称作 投影查询")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用完全限定的表名和列名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("库名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给查询的列起别名，其中关键字 AS 可省略，别名又叫做 导出列（derived column）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("别名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("别名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询某列的所有出现过的值（不重复的值）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与 DISTINCT 相对应的是 ALL 是默认值，没有 DISTINCT 的语句其实都用的 ALL")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[a("code",[s._v("SELECT")]),s._v(" 是关键字，表示将要执行一个查询， "),a("code",[s._v("*")]),s._v(" 表示“所有列”， "),a("code",[s._v("FROM")]),s._v(" 表示将要从哪个表查询。")]),s._v(" "),a("p",[a("code",[s._v("SELECT")]),s._v(" 语句其实并不要求一定要有 "),a("code",[s._v("FROM")]),s._v(" 子句， 比如，"),a("code",[s._v("SELECT 3*2;")]),s._v(" 将返回 "),a("code",[s._v("6")]),s._v(" ， "),a("code",[s._v("SELECT Trim('abc');")]),s._v(" 将返回 "),a("code",[s._v("abc")]),s._v(" ，而 "),a("code",[s._v("SELECT Now()")]),s._v(" 利用 "),a("code",[s._v("Now()")]),s._v(" 函数返回当前日期和时间。")]),s._v(" "),a("p",[s._v("虽然 "),a("code",[s._v("SELECT")]),s._v(" 可以用作计算，但它并不是 SQL 的强项。但是，不带 "),a("code",[s._v("FROM")]),s._v(" 子句的 "),a("code",[s._v("SELECT")]),s._v(" 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 "),a("code",[s._v("SELECT 1;")]),s._v(" 来测试数据库连接。")]),s._v(" "),a("h2",{attrs:{id:"计算字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算字段"}},[s._v("#")]),s._v(" 计算字段")]),s._v(" "),a("p",[s._v("计算字段是运行时在 SELECT 语句内创建的，经过计算、转换、或者格式化后的字段。")]),s._v(" "),a("p",[s._v("语法：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对查询的列的数据执行计算")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 无别名时，会直接将表达式的字符串作为结果的字段，不方便引用结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("含列名的计算表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为计算结果设置别名，方便引用结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("计算表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("别名字段"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"字符串处理函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串处理函数"}},[s._v("#")]),s._v(" 字符串处理函数")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("函数")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("CONCAT(s1, s2, ...)")])]),s._v(" "),a("td",[s._v("拼接字符串，如果某个元素为 NULL 则整体返回 NULL")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CONCAT_WS(<分隔符>, s1, s2, ...)")])]),s._v(" "),a("td",[s._v("拼接字符串，第一个字符串为拼接的分隔符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("INSERT(s1, startIndex, length, s2)")])]),s._v(" "),a("td",[s._v("插入字符串，对字符串 s1 从 startIndex 位置移除 length 个字符，并插入字符串 s2，字符串索引从 1 开始算起，length 为 0 表示只插入，不移除字符。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("REPEAT(s, n)")])]),s._v(" "),a("td",[s._v("生成一个重复 s 直到长度达到 n 的字符串，n <= 0 时返回空字符串")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SPACE(n)")])]),s._v(" "),a("td",[s._v("生成一个长度为 n 的只有空格的字符串")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("REPLACE(s, s1, s2)")])]),s._v(" "),a("td",[s._v("将字符串 s 中所有的 s1 替换为 s2")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LOWER(s)")])]),s._v(" "),a("td",[s._v("将字符串 s 的所有字母变成小写字母")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LCASE(s)")])]),s._v(" "),a("td",[s._v("同 LOWER 函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("UPPER(s)")])]),s._v(" "),a("td",[s._v("将字符串 s 的所有字母变成大写字母")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("UCASE(s)")])]),s._v(" "),a("td",[s._v("同 UPPER 函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TRIM(s)")])]),s._v(" "),a("td",[s._v("去掉字符串 s 两边的空格")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TRIM(s2 FROM s1)")])]),s._v(" "),a("td",[s._v("去掉字符串 s1 两边的 s2 字符串，如 "),a("code",[s._v("TRIM('ab' FROM 'abcabdabeabab')")]),s._v(" 返回 "),a("code",[s._v("'cabdabe'")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LTRIM(s)")])]),s._v(" "),a("td",[s._v("去掉字符串 s 开始处的空格")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("RTRIM(s)")])]),s._v(" "),a("td",[s._v("去掉字符串 s 结尾处的空格")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LEFT(s, n)")])]),s._v(" "),a("td",[s._v("返回字符串 s 的前 n 个字符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("RIGHT(s, n)")])]),s._v(" "),a("td",[s._v("返回字符串 s 的后 n 个字符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LPAD(s1, len, s2)")])]),s._v(" "),a("td",[s._v("用 s2 填充 s1 的左侧，直到总长度达到 len ，s1 长度小于 len 时，不填充，且会被缩短到 len")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("RPAD(s1, len, s2)")])]),s._v(" "),a("td",[s._v("用 s2 填充 s1 的右侧，直到总长度达到 len ，s1 长度小于 len 时，不填充，且会被缩短到 len")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CHAR_LENGTH(s)")])]),s._v(" "),a("td",[s._v("返回字符串 s 所包含的字符个数，一个多字节字符算作一个单字符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LENGTH(s)")])]),s._v(" "),a("td",[s._v("返回字符串 s 的字节长度，utf8 编码时，一个汉字为 3 字节，数字和字母是 1 字节")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("STRCMP(s1, s2)")])]),s._v(" "),a("td",[s._v("比较两个字符串 s1 和 s2 的大小，依次比较字符编码大小, STRCMP('a', 'b') 返回 "),a("code",[s._v("-1")]),s._v(", STRCMP('c', 'b') 返回 "),a("code",[s._v("1")]),s._v(", STRCMP('b', 'b') 返回 "),a("code",[s._v("0")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LOCATE(s1, s)")])]),s._v(" "),a("td",[s._v("返回字符串 s 中 s1 出现的位置，从 1 开始的数字")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("POSITION(s1 IN s)")])]),s._v(" "),a("td",[s._v("同 LOCATE")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("INSTR(s, s1)")])]),s._v(" "),a("td",[s._v("同 LOCATE ，但参数位置对调")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LOCATE(s1, s)")])]),s._v(" "),a("td",[s._v("返回字符串 s 中 s1 出现的位置，从 1 开始的数字")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Soundex()")])]),s._v(" "),a("td",[s._v("返回字符串的 SOUNDEX 值，听起来像什么")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SUBSTRING(s, start[, length])")])]),s._v(" "),a("td",[s._v("返回字符串 s 的 start 位置算起长度为 length 的子字符串，start 为负数时表示倒数第几个字符，length 若不指定默认到末尾")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("MID(s, start[, length])")])]),s._v(" "),a("td",[s._v("同 SUBSTRING 函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("REVERSE(s)")])]),s._v(" "),a("td",[s._v("翻转字符串 s ，比如 'abc' 翻转为 'cba'")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ELT(n, s1, s2, ...)")])]),s._v(" "),a("td",[s._v("n 为 1 返回 s1，n 为 2 返回 s2，以此类推...")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("FIELD(s, s1, s2, ...)")])]),s._v(" "),a("td",[s._v("返回 s 在 "),a("code",[s._v("s1, s2, ...")]),s._v(" 中第一次出现的位置，找不到返回 "),a("code",[s._v("0")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("FIND_IN_SET(s, 's1, s2, ...')")])]),s._v(" "),a("td",[s._v("返回 s 在字符串集合 "),a("code",[s._v("'s1, s2, ...'")]),s._v(" 中第一次出现的位置，找不到返回 "),a("code",[s._v("0")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("MAKE_SET(x, s1, s2, ...)")])]),s._v(" "),a("td",[s._v("将数字 x 转为二进制，返回所有位置为 1 的索引在集合 "),a("code",[s._v("s1, s2, ...")]),s._v(" 对应的值，比如 5 的二进制 "),a("code",[s._v("0101")]),s._v(" ，第 1 和 第 3 位为 1，所以返回 "),a("code",[s._v("s1, s3")]),s._v(" 组合的字符串")])])])]),s._v(" "),a("p",[a("code",[s._v("SOUNDEX")]),s._v(" 需要做进一步的解释。 "),a("code",[s._v("SOUNDEX")]),s._v(" 是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。 "),a("code",[s._v("SOUNDEX")]),s._v(" 考虑了类似\n的发音字符和音节，使得能对串进行发音比较而不是字母比较。虽然 "),a("code",[s._v("SOUNDEX")]),s._v("  不是SQL概念，但 MySQL（就像多数 DBMS 一样）都提供对 "),a("code",[s._v("SOUNDEX")]),s._v(" 的支持。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询时，将用户名转为大写")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Upper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询时，移除 user_name 字段两边的空格")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Trim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询时，返回用户手机号的后四位")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("phone_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" phone_end "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"算术计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术计算"}},[s._v("#")]),s._v(" 算术计算")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("运算符")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("+")])]),s._v(" "),a("td",[s._v("加")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("-")])]),s._v(" "),a("td",[s._v("减")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("*")])]),s._v(" "),a("td",[s._v("乘")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("/")])]),s._v(" "),a("td",[s._v("除")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DIV")])]),s._v(" "),a("td",[s._v("商")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("%")]),s._v(", "),a("code",[s._v("MOD")])]),s._v(" "),a("td",[s._v("取余")])])])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询所有用户，5 年之后的年龄")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" after_five_years "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"查询条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询条件"}},[s._v("#")]),s._v(" 查询条件")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("条件表达式可以用 "),a("code",[s._v("AND")]),s._v(", "),a("code",[s._v("OR")]),s._v(", "),a("code",[s._v("NOT")]),s._v(", "),a("code",[s._v("XOR")]),s._v(" 来分别表示 和，或，非，异或。用于连接两个或更多的条件")]),s._v(" "),a("p",[s._v("要组合三个或者更多的条件，就需要用圆括号 "),a("code",[s._v("()")]),s._v(" 表示条件的优先级。")]),s._v(" "),a("p",[s._v("如果不加括号，条件运算按照 "),a("code",[s._v("NOT")]),s._v(", "),a("code",[s._v("AND")]),s._v(", "),a("code",[s._v("OR")]),s._v(" 的优先级进行，即 "),a("code",[s._v("NOT")]),s._v(" 优先级最高，其次是 "),a("code",[s._v("AND")]),s._v(" ，最后是 "),a("code",[s._v("OR")]),s._v(" 。加上括号可以改变优先级。")]),s._v(" "),a("p",[s._v("当条件语句中同时出现 "),a("code",[s._v("NOT")]),s._v(", "),a("code",[s._v("AND")]),s._v(", "),a("code",[s._v("OR")]),s._v(" 时，应该始终使用圆括号包裹，而不是依赖默认的优先级，这样能够消除歧义，提高可读性。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("条件")]),s._v(" "),a("th",[s._v("意义")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("=")])]),s._v(" "),a("td",[s._v("等于")]),s._v(" "),a("td",[s._v("字符串需要用单引号包裹，比如 "),a("code",[s._v("name = 'abc'")]),s._v("，正常返回 1 或 0，和 NULL 比较返回 NULL")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("<=>")])]),s._v(" "),a("td",[s._v("安全等于")]),s._v(" "),a("td",[s._v("和 "),a("code",[s._v("=")]),s._v(" 基本一样，但可以对 NULL 进行比较")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("<>")]),s._v(", "),a("code",[s._v("!=")])]),s._v(" "),a("td",[s._v("不相等")]),s._v(" "),a("td",[s._v("返回 1 或 0，无法判断空值 NULL")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v(">")])]),s._v(" "),a("td",[s._v("大于")]),s._v(" "),a("td",[s._v("字符串比较根据 ASCII 码，中文字符比较根据数据库设置")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v(">=")])]),s._v(" "),a("td",[s._v("大于等于")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[a("code",[s._v("<")])]),s._v(" "),a("td",[s._v("小于")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[a("code",[s._v("<=")])]),s._v(" "),a("td",[s._v("小于或相等")]),s._v(" "),a("td")]),s._v(" "),a("tr",[a("td",[a("code",[s._v("BETWEEN <min> AND <max>")])]),s._v(" "),a("td",[s._v("范围")]),s._v(" "),a("td",[s._v("在两个数字范围之间")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("IS NULL")])]),s._v(" "),a("td",[s._v("空值检查，是否为 "),a("code",[s._v("NULL")])]),s._v(" "),a("td",[s._v("不能用 "),a("code",[s._v("x = NULL")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("IS NOT NULL")])]),s._v(" "),a("td",[s._v("不为空")]),s._v(" "),a("td",[s._v("不能用 "),a("code",[s._v("xx != NULL")]),s._v(" 。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LEAST(a, b, ...)")])]),s._v(" "),a("td",[s._v("返回最小值")]),s._v(" "),a("td",[a("code",[s._v("LEAST(1, 3, 5)")]),s._v(" 返回 "),a("code",[s._v("1")]),s._v(", LEAST('c', 'b', 'a') 返回 "),a("code",[s._v("'a'")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("GREATEST(a, b, ...)")])]),s._v(" "),a("td",[s._v("返回最大值")]),s._v(" "),a("td",[a("code",[s._v("LEAST(1, 3, 5)")]),s._v(" 返回 "),a("code",[s._v("5")]),s._v(", LEAST('c', 'b', 'a') 返回 "),a("code",[s._v("'c'")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("IN(a, b, ...)")])]),s._v(" "),a("td",[s._v("是集合之一")]),s._v(" "),a("td",[s._v("返回 1 或 0，"),a("code",[s._v("WHERE age IN (10, 20, 30)")]),s._v("， 可以避免连续使用 "),a("code",[s._v("OR")]),s._v(" 的语句。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("NOT IN(a, b, ...)")])]),s._v(" "),a("td",[s._v("不是集合之一")]),s._v(" "),a("td",[s._v("返回 1 或 0，"),a("code",[s._v("WHERE age NOT IN (10, 20, 30)")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LIKE")])]),s._v(" "),a("td",[s._v("类似于")]),s._v(" "),a("td",[a("code",[s._v("%")]),s._v(" 表示任意字符出现任意次数（包括 0 次），"),a("code",[s._v("_")]),s._v(" 表示一个字符（有且必须有一次），如 "),a("code",[s._v("'%ab%'")]),s._v(", "),a("code",[s._v("ab_")]),s._v(", "),a("code",[s._v("a_b")]),s._v(" 等。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("REGEXP")]),s._v(", "),a("code",[s._v("RLIKE")])]),s._v(" "),a("td",[s._v("正则匹配")]),s._v(" "),a("td",[a("code",[s._v("WHERE phone REGEXP '^\\\\\\d{11}$'")]),s._v(" ，MySQL 在正则中转义使用 "),a("code",[s._v("\\\\")]),s._v(" 而不是 "),a("code",[s._v("\\")]),s._v(" 。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("位运算符...")])]),s._v(" "),a("td",[s._v("略")]),s._v(" "),a("td",[s._v("略")])])])]),s._v(" "),a("p",[s._v("使用通配符（"),a("code",[s._v("%")]),s._v(" 和 "),a("code",[s._v("_")]),s._v("）的注意事项：")]),s._v(" "),a("ul",[a("li",[s._v("不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。")]),s._v(" "),a("li",[s._v("在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。")]),s._v(" "),a("li",[s._v("仔细注意通配符的位置。如果放错地方，可能不会返回想要的数")])]),s._v(" "),a("p",[s._v("使用正则的注意事项：")]),s._v(" "),a("ul",[a("li",[s._v("多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。但 MySQL 要求两个反斜杠（MySQL 自己解释一个，正则表达式库解释另一个）。")]),s._v(" "),a("li",[s._v("为了匹配反斜杠 "),a("code",[s._v("\\")]),s._v(" 字符本身，需要使用 "),a("code",[s._v("\\\\\\")]),s._v(" 。")])]),s._v(" "),a("p",[s._v("MySQL 正则的字符集合：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("写法")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("[:alnum:]")])]),s._v(" "),a("td",[s._v("任意字母和数字（同 "),a("code",[s._v("[a-zA-Z0-9]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:alpha:]")])]),s._v(" "),a("td",[s._v("任意字符（同 "),a("code",[s._v("[a-zA-Z]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:blank:]")])]),s._v(" "),a("td",[s._v("空格和制表（同 "),a("code",[s._v("[\\\\t]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:cntrl:]")])]),s._v(" "),a("td",[s._v("ASCII 控制字符（ASCII "),a("code",[s._v("0")]),s._v(" 到 "),a("code",[s._v("31")]),s._v(" 和 "),a("code",[s._v("127")]),s._v("）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:digit:]")])]),s._v(" "),a("td",[s._v("任意数字（同 "),a("code",[s._v("[0-9]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:graph:]")])]),s._v(" "),a("td",[s._v("与 "),a("code",[s._v("[:print:]")]),s._v(" 相同，但不包括空格")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:lower:]")])]),s._v(" "),a("td",[s._v("任意小写字母（同 "),a("code",[s._v("[a-z]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:print:]")])]),s._v(" "),a("td",[s._v("任意可打印字符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:punct:]")])]),s._v(" "),a("td",[s._v("既不在 "),a("code",[s._v("[:alnum:]")]),s._v(" 又不在 "),a("code",[s._v("[:cntrl:]")]),s._v(" 中的任意字符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:space:]")])]),s._v(" "),a("td",[s._v("包括空格在内的任意空白字符（同 "),a("code",[s._v("[\\\\f\\\\n\\\\r\\\\t\\\\v]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:upper:]")])]),s._v(" "),a("td",[s._v("任意大写字母（同 "),a("code",[s._v("[A-Z]")]),s._v(" ）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[:xdigit:]")])]),s._v(" "),a("td",[s._v("任意十六进制数字（同 "),a("code",[s._v("[a-fA-F0-9]")]),s._v(" ）")])])])]),s._v(" "),a("p",[s._v("正则的字符数量控制：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("写法")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("*")])]),s._v(" "),a("td",[a("code",[s._v("0")]),s._v(" 个或多个匹配")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("+")])]),s._v(" "),a("td",[a("code",[s._v("1")]),s._v(" 个或多个匹配（等于 "),a("code",[s._v("{1,}")]),s._v("）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("?")])]),s._v(" "),a("td",[a("code",[s._v("0")]),s._v(" 个或 "),a("code",[s._v("1")]),s._v(" 个匹配（等于 "),a("code",[s._v("{0,1}")]),s._v("）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("{n}")])]),s._v(" "),a("td",[s._v("指定数目的匹配")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("{n,}")])]),s._v(" "),a("td",[s._v("不少于指定数目的匹配")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("{n,m}")])]),s._v(" "),a("td",[s._v("匹配数目的范围（ m 不超过 "),a("code",[s._v("255")]),s._v("）")])])])]),s._v(" "),a("p",[s._v("正则匹配位置限定符：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("写法")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("^")])]),s._v(" "),a("td",[s._v("文本的开始")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("$")])]),s._v(" "),a("td",[s._v("文本的结尾")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[[:<:]]")])]),s._v(" "),a("td",[s._v("单词边界，词的开始，相当于 "),a("code",[s._v("\\b(?=\\w)")]),s._v(", 比如 "),a("code",[s._v("[[:<:]]hello")]),s._v(" 表示 "),a("code",[s._v("hello")]),s._v(" 是一个词的开始才匹配")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("[[:>:]]")])]),s._v(" "),a("td",[s._v("单词边界，词的结尾, 相当于 "),a("code",[s._v("\\b(?<=\\w)")]),s._v(", 比如 "),a("code",[s._v("hello[[:>:]]")]),s._v(" 表示 "),a("code",[s._v("hello")]),s._v(" 是一个词的末尾才匹配")])])])]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中所有成年人(年龄大于 18 )的用户名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，20 到 30 岁的用户名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，没有填写年龄的用户名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，所有姓 王 的用户名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，用户名包含 abc 的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("REGEXP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，用户名以 abc 开头的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("REGEXP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，用户名以 abc 结尾的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("REGEXP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，用户名以大写字母 A 开头的用户， BINARY 指定区分大小写")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("REGEXP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BINARY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，有正确的手机号的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" phone_number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("REGEXP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^1[3-9]\\\\d{9}$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("注意，当筛选条件为 不等于 时，返回的结果不会包含值为 "),a("code",[s._v("NULL")]),s._v(" 的行，比如")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面的语句筛选出年龄不等于 "),a("code",[s._v("18")]),s._v(" 的用户，结果中，不会包含那些没有填写年龄，值为 "),a("code",[s._v("NULL")]),s._v(" 的行。")]),s._v(" "),a("p",[s._v("如果想要在结果中包含值为 "),a("code",[s._v("NULL")]),s._v(" 的行时，需要额外指定：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"日期时间处理函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日期时间处理函数"}},[s._v("#")]),s._v(" 日期时间处理函数")]),s._v(" "),a("p",[s._v("日期和时间采用相应的数据类型和特殊的格式存储，以便能快速和有效地排序或过滤，并且节省物理存储空间。")]),s._v(" "),a("p",[s._v("一般，应用程序不使用用来存储日期和时间的格式，因此日期和时间函数总是被用来读取、统计和处理这些值。")]),s._v(" "),a("p",[s._v("不管是插入或更新表值还是用 WHERE 子句进行过滤，日期必须为格式 "),a("code",[s._v("yyyy-mm-dd")]),s._v(" 。并且，年份应该始终坚持使用 4 位数的完整格式。因此，2005年9月1日，给出为 "),a("code",[s._v("2005-09-01")]),s._v(" 。虽然其他的日期格式可能也行，但这是首选的日期格式")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("函数")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("YEAR(date)")])]),s._v(" "),a("td",[s._v("返回一个日期的年份数值，范围是 1970 ~ 2069")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("QUARTER(date)")])]),s._v(" "),a("td",[s._v("返回一个日期的季度值，范围是 1 ~ 4")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("MONTH(date)")])]),s._v(" "),a("td",[s._v("返回一个日期的月份数值，可能值为 1 ~ 12")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("MONTHNAME(date)")])]),s._v(" "),a("td",[s._v("返回一个日期的月份的英文全称，比如 "),a("code",[s._v("September")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Day(date)")])]),s._v(" "),a("td",[s._v("返回一个日期的天数部分")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Hour(date)")])]),s._v(" "),a("td",[s._v("返回一个时间的小时部分")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Minute(date)")])]),s._v(" "),a("td",[s._v("返回一个时间的分钟部分，范围 0 ~ 59")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Second(date)")])]),s._v(" "),a("td",[s._v("返回一个时间的秒部分，范围 0 ~ 59")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DATE(date)")])]),s._v(" "),a("td",[s._v("返回日期时间的日期(年月日)，格式 "),a("code",[s._v("YYYY-MM-DD")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TIME(date)")])]),s._v(" "),a("td",[s._v("返回一个日期时间的时间(时分秒)，格式 "),a("code",[s._v("hh:mm:ss")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CURDATE()")])]),s._v(" "),a("td",[s._v("返回当前日期(年月日)，格式 "),a("code",[s._v("YYYY-MM-DD")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CURRENT_DATE()")])]),s._v(" "),a("td",[s._v("同 "),a("code",[s._v("CURDATE()")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CURTIME()")])]),s._v(" "),a("td",[s._v("返回当前时间(时分秒)，格式 "),a("code",[s._v("hh:mm:ss")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CURRENT_TIME()")])]),s._v(" "),a("td",[s._v("同 "),a("code",[s._v("CURRENT_TIME()")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("NOW()")])]),s._v(" "),a("td",[s._v("返回当前日期和时间(年月日时分秒)，格式 "),a("code",[s._v("YYYY-MM-DD hh:mm:ss")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CURRENT_TIMESTAMP()")])]),s._v(" "),a("td",[s._v("同 "),a("code",[s._v("NOW()")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LOCALTIME()")])]),s._v(" "),a("td",[s._v("同 "),a("code",[s._v("NOW()")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SYSDATE()")])]),s._v(" "),a("td",[s._v("同 "),a("code",[s._v("NOW()")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("UNIX_TIMESTAMP()")])]),s._v(" "),a("td",[s._v("返回当前时间的 UNIX 时间戳(从GMT 时间 '1970-01-01 00:00:00' 开始算起的秒数)")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("UNIX_TIMESTAMP(date)")])]),s._v(" "),a("td",[s._v("返回指定的 date 的 UNIX 时间戳(从GMT 时间 '1970-01-01 00:00:00' 开始算起的秒数)")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("FROM_UNIXTIME(<时间戳>)")])]),s._v(" "),a("td",[s._v("返回指定的 UNIX 时间戳转换为普通格式的时间，与 "),a("code",[s._v("UNIX_TIMESTAMP(date)")]),s._v(" 互为反函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("UTC_DATE()")])]),s._v(" "),a("td",[s._v("返回当前 UTC（世界标准时间）日期（年月日），格式 "),a("code",[s._v("YYYY-MM-DD")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("UTC_TIME()")])]),s._v(" "),a("td",[s._v("返回当前 UTC（世界标准时间）时间（时分秒），格式 "),a("code",[s._v("hh:mm:ss")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DAYOFWEEK(date)")])]),s._v(" "),a("td",[s._v("返回一个日期是星期几的数值，周日到周六依次为 1 ~ 7")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DAYNAME(date)")])]),s._v(" "),a("td",[s._v("返回一个日期是星期几的英文全名，比如 "),a("code",[s._v("Monday")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("WEEKDAY(date)")])]),s._v(" "),a("td",[s._v("返回一个日期在一周之中的索引，周一到周日依次为 0 ~ 6")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("WEEK(date[, <mode>])")])]),s._v(" "),a("td",[s._v("返回一个日期是一年中的第几周，mode 取值为 0 ~ 7 ，")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("WEEKOFYEAR(date)")])]),s._v(" "),a("td",[s._v("返回一个日期是一年中的第几周，范围为 1 ~ 53 ，相当于 "),a("code",[s._v("WEEK(date, 3)")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DAYOFYEAR(date)")])]),s._v(" "),a("td",[s._v("返回一个日期是一年中的第几天，范围是 1 ~ 366")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DAYOFMONTH(date)")])]),s._v(" "),a("td",[s._v("返回一个日期是一个月中的第几天，范围是 1 ~ 31")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("EXTRACT(type FROM date)")])]),s._v(" "),a("td",[s._v("返回一个日期中的指定 type 部分的值，type 可取 "),a("code",[s._v("YEAR")]),s._v(" (年 2018), "),a("code",[s._v("YEAR_MONTH")]),s._v("(年月 201801), "),a("code",[s._v("DAY_MINUTE")]),s._v("(日时分 300105)")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TIME_TO_SEC(time)")])]),s._v(" "),a("td",[s._v("返回指定时间等于多少秒，"),a("code",[s._v("TIME_TO_SEC('30:10:30')")]),s._v(" 返回 "),a("code",[s._v("108630")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SEC_TO_TIME(time)")])]),s._v(" "),a("td",[s._v("返回指定时间等于多少秒，"),a("code",[s._v("SEC_TO_TIME(108630)")]),s._v(" 返回 "),a("code",[s._v("30:10:30")])])])])]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("WEEK()")]),s._v(" 函数中，第二个参数 mode 参数的取值：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Mode")]),s._v(" "),a("th",[s._v("一周的第一天")]),s._v(" "),a("th",[s._v("范围")]),s._v(" "),a("th",[s._v("第一周怎么算")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("0")]),s._v(" "),a("td",[s._v("周日")]),s._v(" "),a("td",[s._v("0~53")]),s._v(" "),a("td",[s._v("在本年度中有一个周日")])]),s._v(" "),a("tr",[a("td",[s._v("1")]),s._v(" "),a("td",[s._v("周一")]),s._v(" "),a("td",[s._v("0~53")]),s._v(" "),a("td",[s._v("在本年度中有3天以上")])]),s._v(" "),a("tr",[a("td",[s._v("2")]),s._v(" "),a("td",[s._v("周日")]),s._v(" "),a("td",[s._v("1~53")]),s._v(" "),a("td",[s._v("在本年度中有一个周日")])]),s._v(" "),a("tr",[a("td",[s._v("3")]),s._v(" "),a("td",[s._v("周一")]),s._v(" "),a("td",[s._v("1~53")]),s._v(" "),a("td",[s._v("在本年度中有3天以上")])]),s._v(" "),a("tr",[a("td",[s._v("4")]),s._v(" "),a("td",[s._v("周日")]),s._v(" "),a("td",[s._v("0-53")]),s._v(" "),a("td",[s._v("在本年度中有3天以上")])]),s._v(" "),a("tr",[a("td",[s._v("5")]),s._v(" "),a("td",[s._v("周一")]),s._v(" "),a("td",[s._v("0~53")]),s._v(" "),a("td",[s._v("在本年度中有一个周一")])]),s._v(" "),a("tr",[a("td",[s._v("6")]),s._v(" "),a("td",[s._v("周日")]),s._v(" "),a("td",[s._v("1~53")]),s._v(" "),a("td",[s._v("在本年度中有3天以上")])]),s._v(" "),a("tr",[a("td",[s._v("7")]),s._v(" "),a("td",[s._v("周一")]),s._v(" "),a("td",[s._v("1~53")]),s._v(" "),a("td",[s._v("在本年度中有一个周一")])])])]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询用户表中，在 2000年1月1日 创建的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于 create_time 是包含 年月日时分秒 的，查询条件无法匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" create_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000-01-01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正确方式：使用 Date() 函数，仅比较 create_time 的日期（年月日）部分")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000-01-01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上例说明，如果想要的是一个日期（年月日）值，那么不管数据库存的是否就是 年月日，还是其他类型，都应该始终坚持使用 "),a("code",[s._v("Date()")]),s._v(" 函数，其他类型同样如此，比如想要 年份，使用 "),a("code",[s._v("Year()")]),s._v(" 函数，依次类推。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 2000年5月 创建的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 方式一：需要自己计算每个月有多少天")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" create_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000-05-01'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000-05-31'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 方式二：不需要知道每个月有多少天")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("日期和时间计算函数：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("函数")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("ADDDATE(date, INTERVAL <expr> <type>)")])]),s._v(" "),a("td",[s._v("返回指定 date 日期上加上一个值，expr 可以为负值，表示相减")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DATE_ADD(date, INTERVAL <expr> <type>)")])]),s._v(" "),a("td",[s._v("同 ADDDATE 函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SUBDATE(date, INTERVAL <expr> <type>)")])]),s._v(" "),a("td",[s._v("返回指定 date 日期上减掉一个值，expr 可以为负值，表示相减")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DATE_SUB(date, INTERVAL <expr> <type>)")])]),s._v(" "),a("td",[s._v("同 SUBDATE 函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ADDTIME(date, expr)")])]),s._v(" "),a("td",[s._v("返回指定 date 日期上加一个时间值，如 "),a("code",[s._v("ADDTIME('2000-01-01 00:00:00', '00:30:05')")]),s._v(" 返回 "),a("code",[s._v("2000-01-01 00:30:05")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SUBTIME")])]),s._v(" "),a("td",[s._v("返回指定 date 日期上减去一个时间值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DATEDIFF(date1, date2)")])]),s._v(" "),a("td",[s._v("返回 "),a("code",[s._v("date1 - date2")]),s._v(" 的天数差，值有可能为负数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DATE_FORMAT(date, format_string)")])]),s._v(" "),a("td",[s._v("返回一个格式化的日期(年月日)")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TIME_FORMAT(date, format_string)")])]),s._v(" "),a("td",[s._v("返回一个格式化的时间(时分秒)")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("GET_FORMAT(val_type, format_type)")])]),s._v(" "),a("td",[s._v("返回不同类型的日期时间含占位符字符串，val_type（日期数据类型）可选值 "),a("code",[s._v("DATE | DATETIME | TIME")]),s._v(", format_type (格式化显示类型) 可选值 "),a("code",[s._v("EUR | INTERVAL | ISO | JIS | USA")])])])])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("type 值")]),s._v(" "),a("th",[s._v("预期的 expr 格式")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("MICROSECOND")]),s._v(" "),a("td",[s._v("MICROSECONDS")])]),s._v(" "),a("tr",[a("td",[s._v("SECOND")]),s._v(" "),a("td",[s._v("SECONDS")])]),s._v(" "),a("tr",[a("td",[s._v("MINUTE")]),s._v(" "),a("td",[s._v("MINUTES")])]),s._v(" "),a("tr",[a("td",[s._v("HOUR")]),s._v(" "),a("td",[s._v("HOURS")])]),s._v(" "),a("tr",[a("td",[s._v("DAY")]),s._v(" "),a("td",[s._v("DAYS")])]),s._v(" "),a("tr",[a("td",[s._v("WEEK")]),s._v(" "),a("td",[s._v("WEEKS")])]),s._v(" "),a("tr",[a("td",[s._v("MONTH")]),s._v(" "),a("td",[s._v("MONTHS")])]),s._v(" "),a("tr",[a("td",[s._v("QUARTER")]),s._v(" "),a("td",[s._v("QUARTERS")])]),s._v(" "),a("tr",[a("td",[s._v("YEAR")]),s._v(" "),a("td",[s._v("YEARS")])]),s._v(" "),a("tr",[a("td",[s._v("SECOND_MICROSECOND")]),s._v(" "),a("td",[s._v("'SECONDS.MICROSECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("MINUTE_MICROSECOND")]),s._v(" "),a("td",[s._v("'MINUTES.MICROSECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("MINUTE_SECOND")]),s._v(" "),a("td",[s._v("'MINUTES:SECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("HOUR_MICROSECOND")]),s._v(" "),a("td",[s._v("'HOURS.MICROSECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("HOUR_SECOND")]),s._v(" "),a("td",[s._v("'HOURS:MINUTES:SECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("HOUR_MINUTE")]),s._v(" "),a("td",[s._v("'HOURS:MINUTES'")])]),s._v(" "),a("tr",[a("td",[s._v("DAY_MICROSECOND")]),s._v(" "),a("td",[s._v("'DAYS.MICROSECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("DAY_SECOND")]),s._v(" "),a("td",[s._v("'DAYS HOURS:MINUTES:SECONDS'")])]),s._v(" "),a("tr",[a("td",[s._v("DAY_MINUTE")]),s._v(" "),a("td",[s._v("'DAYS HOURS:MINUTES'")])]),s._v(" "),a("tr",[a("td",[s._v("DAY_HOUR")]),s._v(" "),a("td",[s._v("'DAYS HOURS'")])]),s._v(" "),a("tr",[a("td",[s._v("YEAR_MONTH")]),s._v(" "),a("td",[s._v("'YEARS-MONTHS'")])])])]),s._v(" "),a("p",[s._v("格式化函数 "),a("code",[s._v("DATE_FORMAT")]),s._v(" 的占位符：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("说明符")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("%a")]),s._v(" "),a("td",[s._v("工作日的缩写名称( Sun...Sat)")])]),s._v(" "),a("tr",[a("td",[s._v("%b")]),s._v(" "),a("td",[s._v("月份的缩写名称(Jan...Dec)")])]),s._v(" "),a("tr",[a("td",[s._v("%C")]),s._v(" "),a("td",[s._v("月份，数字形式(0...12)")])]),s._v(" "),a("tr",[a("td",[s._v("%D")]),s._v(" "),a("td",[s._v("以英文后缀表示月中的几号(1st, 2nd...)")])]),s._v(" "),a("tr",[a("td",[s._v("%d")]),s._v(" "),a("td",[s._v("该月日期，数字形式(0...31)")])]),s._v(" "),a("tr",[a("td",[s._v("%e")]),s._v(" "),a("td",[s._v("该月日期，数字形式(0...31)")])]),s._v(" "),a("tr",[a("td",[s._v("%f")]),s._v(" "),a("td",[s._v("微秒000000... 999999)")])]),s._v(" "),a("tr",[a("td",[s._v("%H")]),s._v(" "),a("td",[s._v("以2位数表示24小时(00...23)")])]),s._v(" "),a("tr",[a("td",[s._v("%h，%I")]),s._v(" "),a("td",[s._v("以2位数表示12小时(01...12)")])]),s._v(" "),a("tr",[a("td",[s._v("%i")]),s._v(" "),a("td",[s._v("分钟，数字形式0...59)")])]),s._v(" "),a("tr",[a("td",[s._v("%j")]),s._v(" "),a("td",[s._v("一年中的天数(001...366)")])]),s._v(" "),a("tr",[a("td",[s._v("%k")]),s._v(" "),a("td",[s._v("以24 (0...232) 小时表示时间")])]),s._v(" "),a("tr",[a("td",[s._v("%l")]),s._v(" "),a("td",[s._v("以12 (1...12) 小时表示时间")])]),s._v(" "),a("tr",[a("td",[s._v("%M")]),s._v(" "),a("td",[s._v("月份名称(January..December)")])]),s._v(" "),a("tr",[a("td",[s._v("%m")]),s._v(" "),a("td",[s._v("月份，数字形式0...12)")])]),s._v(" "),a("tr",[a("td",[s._v("%p")]),s._v(" "),a("td",[s._v("上午(AM)或下午(PM)")])]),s._v(" "),a("tr",[a("td",[s._v("%r")]),s._v(" "),a("td",[s._v("时间，12 小时制(小时hh:分钟mm:秒数ss后加AM或PM)")])]),s._v(" "),a("tr",[a("td",[s._v("%S,%s")]),s._v(" "),a("td",[s._v("以2位数形式表示秒(00.. .59)")])]),s._v(" "),a("tr",[a("td",[s._v("%T")]),s._v(" "),a("td",[s._v("时间，24小时制(小时hh:分钟mm:秒数ss)")])]),s._v(" "),a("tr",[a("td",[s._v("%U")]),s._v(" "),a("td",[s._v("周(00...53)，其中周日为每周的第--天")])]),s._v(" "),a("tr",[a("td",[s._v("%u")]),s._v(" "),a("td",[s._v("周(00...53)， 其中周一为每周的第一-天")])]),s._v(" "),a("tr",[a("td",[s._v("%V")]),s._v(" "),a("td",[s._v("周(01...53)， 其中周日为每周的第一天;和%X同时使用")])]),s._v(" "),a("tr",[a("td",[s._v("%V")]),s._v(" "),a("td",[s._v("周(01...53)， 其中周一为每周的第一-天: 和%x同时使用")])]),s._v(" "),a("tr",[a("td",[s._v("%W")]),s._v(" "),a("td",[s._v("工作日名称(周日...周六)")])]),s._v(" "),a("tr",[a("td",[s._v("%w")]),s._v(" "),a("td",[s._v("一周中的每日(0=周日...6=周六)")])]),s._v(" "),a("tr",[a("td",[s._v("%X")]),s._v(" "),a("td",[s._v("该周的年份，其中周日为每周的第一天:数字形式，4位数;和%V同时使用")])]),s._v(" "),a("tr",[a("td",[s._v("%x")]),s._v(" "),a("td",[s._v("该周的年份，其中周一为每周的第- -天;数字形式，4位数;和%v同时使用")])]),s._v(" "),a("tr",[a("td",[s._v("%Y")]),s._v(" "),a("td",[s._v("4位数形式表示年份")])]),s._v(" "),a("tr",[a("td",[s._v("%y")]),s._v(" "),a("td",[s._v("2位数形式表示年份")])]),s._v(" "),a("tr",[a("td",[s._v("%%")]),s._v(" "),a("td",[s._v("标识符%")])])])]),s._v(" "),a("p",[a("code",[s._v("GET_FORMAT")]),s._v(" 函数返回的格式字符串：")]),s._v(" "),a("p",[s._v("val_type 取值 | format_type 取值 | 返回的格式字符串\nDATE | EUR | %d.%m.%Y\nDATE | INTERVAL | %Y%m%d\nDATE | ISO | %Y-%m-%d\nDATE | JIS | %Y-%m-%d\nDATE | USA | %m.%d.%Y\nTIME | EUR | %H.%i.%s\nTIME | INTERVAL | %H%i%s\nTIME | ISO | %H:%i:%s\nTIME | JIS | %H:%i:%s\nTIME | USA | %h:%i:%s %p\nDATETIME | EUR | %Y-%m-%d %H.%i.%s\nDATETIME | INTERVAL | %Y%m%d%H%i%s\nDATETIME | ISO | %Y-%m-%d %H:%i:%s\nDATETIME | JIS | %Y-%m-%d %H:%i:%s\nDATETIME | USA | %Y-%m-%d %H:%i:%s")]),s._v(" "),a("h3",{attrs:{id:"数值处理函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值处理函数"}},[s._v("#")]),s._v(" 数值处理函数")]),s._v(" "),a("p",[s._v("数值处理函数仅处理数值数据。这些函数一般主要用于代数、三角或几何运算，因此没有串或日期 — 时间处理函数的使用那么频繁。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("函数")]),s._v(" "),a("th",[s._v("意义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("Abs(x)")])]),s._v(" "),a("td",[s._v("返回一个数的绝对值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Cos()")])]),s._v(" "),a("td",[s._v("返回一个角度的余弦")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Exp()")])]),s._v(" "),a("td",[s._v("返回一个数的指数值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Mod(x, y)")])]),s._v(" "),a("td",[s._v("返回 x 被 y 除后的余数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Pi()")])]),s._v(" "),a("td",[s._v("返回圆周率")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Rand()")])]),s._v(" "),a("td",[s._v("返回一个随机浮点值（0 ~ 1.0 之间）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Rand(x)")])]),s._v(" "),a("td",[s._v("返回根据 x 产生的随机浮点值，x 不变则返回值始终一样")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Sqrt(x)")])]),s._v(" "),a("td",[s._v("返回一个数的平方根")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("Tan()")])]),s._v(" "),a("td",[s._v("返回一个角度的正切")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CEIL(x)")])]),s._v(" "),a("td",[s._v("返回 x 向上取整的整数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("CEILING(x)")])]),s._v(" "),a("td",[s._v("同 CEIL 函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("FLOOR(x)")])]),s._v(" "),a("td",[s._v("返回 x 向下取整的整数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ROUND(x)")])]),s._v(" "),a("td",[s._v("返回 x 四舍五入后的整数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ROUND(x, y)")])]),s._v(" "),a("td",[s._v("x 四舍五入保留 y 位小数，y 为负数时，将小数点左边 y 位数变为 "),a("code",[s._v("0")]),s._v("，截取时进行四舍五入。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TRUNCATE(x, y)")])]),s._v(" "),a("td",[s._v("x 四舍五入保留 y 位小数，y 为负数时，将小数点左边 y 位数变为 "),a("code",[s._v("0")]),s._v("，截取时不进行四舍五入。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SIGN(x)")])]),s._v(" "),a("td",[s._v("判断一个数的正负，负数、0、正数分别返回 "),a("code",[s._v("-1")]),s._v(", "),a("code",[s._v("0")]),s._v(", "),a("code",[s._v("1")]),s._v("。")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("POW(x, y)")])]),s._v(" "),a("td",[s._v("获取 x 的 y 次方的值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("POWER(x, y)")])]),s._v(" "),a("td",[s._v("同 "),a("code",[s._v("POW(x, y)")])])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("EXP(x)")])]),s._v(" "),a("td",[s._v("e 的 x 乘方")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LOG(x)")])]),s._v(" "),a("td",[s._v("x 的自然对数，x 为负数时返回 NULL")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LOG10(x)")])]),s._v(" "),a("td",[s._v("x 的基数为 10 的对数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("RADIANS(x)")])]),s._v(" "),a("td",[s._v("将 x 由角度转化为弧度")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("DEGREES(x)")])]),s._v(" "),a("td",[s._v("将 x 由弧度转化为角度")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SIN(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的正弦")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ASIN(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的反正弦，和 SIN 互为反函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("COS(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的余弦")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ACOS(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的反余弦，和 COS 互为反函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("TAN(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的正切")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ATAN(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的反正切，和 TAN 互为反函数")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("COT(x)")])]),s._v(" "),a("td",[s._v("返回弧度值 x 的余切，和 TAN 互为倒函数")])])])]),s._v(" "),a("h3",{attrs:{id:"条件判断函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件判断函数"}},[s._v("#")]),s._v(" 条件判断函数")]),s._v(" "),a("p",[a("code",[s._v("IF(<表达式>, <值1>, <值2>)")]),s._v(" 表达式结果为真，返回 值1，否则返回 值2")]),s._v(" "),a("p",[a("code",[s._v("IFNULL(<值1>, <值2>)")]),s._v(" 值1 为 NULL 时返回 值2，否则就返回 值1")]),s._v(" "),a("p",[a("code",[s._v("CASE...WHEN")]),s._v(" 语句：表达式结果，如果等于 条件1，则返回 结果1，等于 条件2，则返回 结果2，全都不匹配则返回 ELSE 后的 默认结果 。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("结果"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("结果"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件N"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("结果N"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("默认结果"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[s._v("#")]),s._v(" 排序")]),s._v(" "),a("p",[s._v("通常，查询结果是按照主键排序的，如果要根据某列进行排序，可以使用 "),a("code",[s._v("ORDER BY ...")]),s._v(" 子句。列名接上关键字 "),a("code",[s._v("ASC")]),s._v(" 或 "),a("code",[s._v("DESC")]),s._v(" 表示正序或倒序排列。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正序，如果有 WHERE 子句，ORDER BY 语句要放在 WHERE 之后，ASC 为默认值可省略。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 倒序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先按 列名1 倒序排列，如果 列名1 值相同，再按 列名2 正序排列")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"分页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页"}},[s._v("#")]),s._v(" 分页")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("LIMIT <M> OFFSET <N>")]),s._v(" 子句实现分页查询，表示本次最多查询 M 条记录，跳过前 N 条纪录（相当于从 N + 1 开始）。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("分页大小"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OFFSET")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("跳过的数量"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("比如，每一页查 10 条数据，第一页为 "),a("code",[s._v("LIMIT 10 OFFSET 0")]),s._v(" ，第二页为 "),a("code",[s._v("LIMIT 10 OFFSET 10")]),s._v(" ，第三页为 "),a("code",[s._v("LIMIT 10 OFFSET 20")]),s._v("，最后一页不足 10 条时，则返回实际剩余的条数。")]),s._v(" "),a("p",[s._v("分页查询的关键在于，首先要确定每页需要显示的结果数量 "),a("code",[s._v("pageSize")]),s._v(" ，然后根据当前页的索引 "),a("code",[s._v("pageIndex")]),s._v(" （从 "),a("code",[s._v("1")]),s._v(" 开始），确定 "),a("code",[s._v("LIMIT")]),s._v(" 和 "),a("code",[s._v("OFFSET")]),s._v(" 应该设定的值：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("LIMIT")]),s._v(" 总是设定为 "),a("code",[s._v("pageSize")]),s._v("；")]),s._v(" "),a("li",[a("code",[s._v("OFFSET")]),s._v(" 计算公式为 "),a("code",[s._v("pageSize * (pageIndex - 1)")]),s._v(" 。")])]),s._v(" "),a("p",[a("code",[s._v("OFFSET")]),s._v(" 超过了数据表的最大数量并不会报错，而是得到一个空的结果集。")]),s._v(" "),a("p",[a("code",[s._v("OFFSET")]),s._v(" 是可选的（默认值为 "),a("code",[s._v("0")]),s._v("），如果只写 "),a("code",[s._v("LIMIT 15")]),s._v(" ，那么相当于 "),a("code",[s._v("LIMIT 15 OFFSET 0")]),s._v(" 。")]),s._v(" "),a("p",[s._v("在MySQL中，"),a("code",[s._v("LIMIT 15 OFFSET 30")]),s._v(" 还可以简写成 "),a("code",[s._v("LIMIT 30, 15")]),s._v(" ，注意，OFFSET 和 LIMIT 的值对调了位置。")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("LIMIT <M> OFFSET <N>")]),s._v(" 分页时，随着 "),a("code",[s._v("N")]),s._v(" 越来越大，查询效率也会越来越低。")]),s._v(" "),a("h2",{attrs:{id:"聚合查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合查询"}},[s._v("#")]),s._v(" 聚合查询")]),s._v(" "),a("p",[s._v("对于统计总数、平均数这类计算，SQL 提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。")]),s._v(" "),a("p",[a("code",[s._v("COUNT()")]),s._v(" 函数用于统计一张表的数据量或某一列的数据量：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("别名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("别名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("SQL 提供如下聚合函数：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("函数")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("COUNT(<列名>)")])]),s._v(" "),a("td",[s._v("统计某列的行数，忽略 "),a("code",[s._v("NULL")]),s._v(" 值，但 "),a("code",[s._v("Count(*)")]),s._v(" 不忽略 "),a("code",[s._v("NULL")]),s._v(" 值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SUM(<数值列>)")])]),s._v(" "),a("td",[s._v("计算某一列的合计值，该列必须为数值类型，忽略 "),a("code",[s._v("NULL")]),s._v(" 值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("AVG(<数值列>)")])]),s._v(" "),a("td",[s._v("计算某一列的平均值，该列必须为数值类型，忽略 "),a("code",[s._v("NULL")]),s._v(" 值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("MAX(<列名>)")])]),s._v(" "),a("td",[s._v("计算某一列的最大值，忽略 "),a("code",[s._v("NULL")]),s._v(" 值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("MIN(<列名>)")])]),s._v(" "),a("td",[s._v("计算某一列的最小值，忽略 "),a("code",[s._v("NULL")]),s._v(" 值")])])])]),s._v(" "),a("p",[s._v("注意， "),a("code",[s._v("MAX()")]),s._v(" 和 "),a("code",[s._v("MIN()")]),s._v(" 函数并不限于数值类型。如果是字符类型， "),a("code",[s._v("MAX()")]),s._v(" 和 "),a("code",[s._v("MIN()")]),s._v(" 会返回排序最后和排序最前的字符。")]),s._v(" "),a("p",[s._v("要特别注意：如果聚合查询的 "),a("code",[s._v("WHERE")]),s._v(" 条件没有匹配到任何行， "),a("code",[s._v("COUNT()")]),s._v(" 会返回 "),a("code",[s._v("0")]),s._v(" ，而 "),a("code",[s._v("SUM()")]),s._v(" 、 "),a("code",[s._v("AVG()")]),s._v(" 、 "),a("code",[s._v("MAX()")]),s._v(" 和 "),a("code",[s._v("MIN()")]),s._v(" 会返回 "),a("code",[s._v("NULL")]),s._v(" ：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计用户数量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" user_count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计用户平均年龄")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" avg_age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询年龄最大的用户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" max_age "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同时查询 用户数量，平均年龄，最大年龄，最小年龄")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" user_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" avg_age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" max_age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" min_age\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"分组查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组查询"}},[s._v("#")]),s._v(" 分组查询")]),s._v(" "),a("p",[s._v("对于聚合查询，SQL 还提供了“分组聚合”的功能，使用 "),a("code",[s._v("GROUP BY <列名>")]),s._v(" 进行分组查询。")]),s._v(" "),a("p",[a("code",[s._v("GROUP BY")]),s._v(" 子句必须出现在 "),a("code",[s._v("WHERE")]),s._v(" 子句之后， "),a("code",[s._v("ORDER BY")]),s._v(" 子句之前。")]),s._v(" "),a("p",[s._v("比如，要统计用户表 users 中，各个角色下分别有多少用户，可以用到分组。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据 role_id 进行分组统计，查看分别有多少人")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 优化：分组统计时，同时列出 role_id ，便于区分和对应数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 继续优化：将每个分组中的用户名使用 GROUP_CONCAT 拼接起来组成一个新字段叫做 group_name_list")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" GROUP_CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" group_name_list\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("注意，在分组查询中，在 "),a("code",[s._v("SELECT")]),s._v(" 之后的列名，除了聚合函数外， 必须同时出现在 "),a("code",[s._v("GROUP BY")]),s._v(" 之后。")]),s._v(" "),a("p",[s._v("可以使用多个列进行分组：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("使用 "),a("code",[s._v("WITH ROLLUP")]),s._v(" 关键字，会在查询数据最后添加一行数据，在分组的那一列表示所有分组数据加起来的总数")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 WITH ROLLUP 后，会返回 num 的汇总数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" gender "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH ROLLUP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当使用 "),a("code",[s._v("ROLLUP")]),s._v(" 时，不能同时使用 "),a("code",[s._v("ORDER BY")]),s._v(" 子句进行结果排序,即 "),a("code",[s._v("ROLLUP")]),s._v(" 和 "),a("code",[s._v("ORDER BY")]),s._v(" 是互相排斥的。")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("HAVING")]),s._v(" 子句可以将分组进行过滤，"),a("code",[s._v("HAVING")]),s._v(" 是 "),a("code",[s._v("GROUP BY")]),s._v(" 的子句，相当于 "),a("code",[s._v("WHERE")]),s._v(" 是 "),a("code",[s._v("SELECT")]),s._v(" 的子句。")]),s._v(" "),a("p",[a("code",[s._v("HAVING")]),s._v(" 支持所有 "),a("code",[s._v("WHERE")]),s._v(" 操作符，它们的句法是相同的，只是关键字的差别。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询各个用户角色下有多少用户，排除少于 10 人的分组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("HAVING")]),s._v(" 和 "),a("code",[s._v("WHERE")]),s._v(" 的差别， 这里有另一种理解方法， "),a("code",[s._v("WHERE")]),s._v(" 在数据分组前进行过滤， "),a("code",[s._v("HAVING")]),s._v(" 在数据分组后进行过滤。这是一个重要的区别， "),a("code",[s._v("WHERE")]),s._v(" 排除的行不包括在分组中。这可能会改变计算值，从而影响 "),a("code",[s._v("HAVING")]),s._v(" 子句中基于这些值过滤掉的分组。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询各个用户角色下 2000 年之后创建的用户数量，排除少于 10 人的分组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"select-子句顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-子句顺序"}},[s._v("#")]),s._v(" SELECT 子句顺序")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("子句")]),s._v(" "),a("th",[s._v("说明")]),s._v(" "),a("th",[s._v("是否必须使用")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("SELECT")])]),s._v(" "),a("td",[s._v("要返回的列或表达式")]),s._v(" "),a("td",[s._v("是")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("FROM")])]),s._v(" "),a("td",[s._v("从中检索数据的表")]),s._v(" "),a("td",[s._v("仅在从表选择数据时使用")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("WHERE")])]),s._v(" "),a("td",[s._v("行级过滤")]),s._v(" "),a("td",[s._v("否")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("GROUP BY")])]),s._v(" "),a("td",[s._v("分组说明")]),s._v(" "),a("td",[s._v("仅在按组计算聚集时使用")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("HAVING")])]),s._v(" "),a("td",[s._v("组级过滤")]),s._v(" "),a("td",[s._v("否")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("ORDER BY")])]),s._v(" "),a("td",[s._v("输出排序顺序")]),s._v(" "),a("td",[s._v("否")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("LIMIT")])]),s._v(" "),a("td",[s._v("要检索的行数")]),s._v(" "),a("td",[s._v("否")])])])]),s._v(" "),a("h2",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[s._v("#")]),s._v(" 子查询")]),s._v(" "),a("p",[s._v("一条查询语句的条件依赖于另一条查询语句的条件时，可以用子查询来解决。注意，子查询结尾不加分号 "),a("code",[s._v(";")]),s._v(" 。")]),s._v(" "),a("p",[s._v("比如，现在有三个表， users 表存储用户信息， orders 表存储订单信息，包含订单 id，用户 id，订单日期， order_products 存储订单中的产品信息，包含订单 id，产品信息。")]),s._v(" "),a("p",[s._v("现在，想要查询购买了产品编号为 "),a("code",[s._v("123456")]),s._v(" 的所有用户信息：")]),s._v(" "),a("p",[s._v("按照之前的简单查询语法，会这样实现：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一步，根据产品编号 123456 在 order_products 中查询订单 id")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" order_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" order_products "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" product_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一步返回的 order_id 有两个，分别是 10001, 10002")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二步，根据查到的 order_id 在 orders 表中查询对应 user_id")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" order_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二步返回的 user_id 有两个，分别为 111, 222")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第三步，根据得到的 user_id 在 users 表中查询对应的用户信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("222")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("现在，把以上三个步骤变为一个步骤，把第一步变为第二步的子查询，第二步变为第三步的子查询来实现：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" order_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" order_id\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" order_products\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" product_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("在 "),a("code",[s._v("SELECT")]),s._v(" 语句中，子查询总是从内向外处理。")]),s._v(" "),a("p",[s._v("在 WHERE 子句中使用子查询能够编写出功能很强并且很灵活的 SQL 语句。对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性能的限制，不能嵌套太多的子查询。")]),s._v(" "),a("p",[s._v("子查询一般与 "),a("code",[s._v("IN | ANY(SOME) | ALL | EXISTS")]),s._v(" 操作符结合使用，但也可以用于等于（ = ）、不等于（ <> ）等任何想要的条件。")]),s._v(" "),a("p",[s._v("比如员工表 staff 和产品表 product 之间使用：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询工资高于所有产品的售价的员工，必须大于所有子查询的结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" staff_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" staff "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" price "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询工资高于任意一款产品的售价的员工，只需要大于子查询结果的某一项即可")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" staff_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" staff "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SOME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" price "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果子查询存在数据（只要有一条即可），则查询出所有员工信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" staff "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" price "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" price "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果员工的工资等于某款产品的售价，则查询出这名员工的信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" staff "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" price "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" product"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("还可以将子查询作为计算字段，也就是放在 "),a("code",[s._v("SELECT")]),s._v(" 之后，比如，"),a("code",[s._v("SELECT <子查询> from ...")]),s._v(" 。")]),s._v(" "),a("p",[s._v("比如，现在想要查询用户表中，每个用户的订单数量，需要先查询所有用户，然后再查询每个用户产生的订单数量。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 子查询语句中使用了 完全限定列名（`<表名>.<列名>`）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("user_id\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" order_count\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" order_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上述使用了完全限定列名的子查询叫做 相关子查询（correlated subquery），也就是涉及外部查询的子查询，任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个点 "),a("code",[s._v(".")]),s._v(" 分隔）。")]),s._v(" "),a("h2",{attrs:{id:"联结-多表-查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联结-多表-查询"}},[s._v("#")]),s._v(" 联结（多表）查询")]),s._v(" "),a("p",[s._v("从多张表中查询数据：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("比如：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这种一次查询两个表的数据，查询的结果也是一个二维表，它是 "),a("code",[s._v("students")]),s._v(" 表和 "),a("code",[s._v("classes")]),s._v(" 表的“乘积”，即 "),a("code",[s._v("students")]),s._v(" 表的每一行与 "),a("code",[s._v("classes")]),s._v(" 表的每一行都两两拼在一起返回。结果集的列数是 "),a("code",[s._v("students")]),s._v(" 表和 "),a("code",[s._v("classes")]),s._v(" 表的 "),a("strong",[s._v("列数之和")]),s._v("，行数是 "),a("code",[s._v("students")]),s._v(" 表和 "),a("code",[s._v("classes")]),s._v(" 表的 "),a("strong",[s._v("行数之积")]),s._v("。")]),s._v(" "),a("p",[s._v("多表查询时，比如两个表中同时都有 "),a("code",[s._v("id")]),s._v(", "),a("code",[s._v("name")]),s._v(" 字段时。各个表中相同的列名全都会作为结果的列名被列出来，")]),s._v(" "),a("p",[s._v("可以设置列的别名来给两个表各自的 "),a("code",[s._v("id")]),s._v(" 和 "),a("code",[s._v("name")]),s._v(" 列起别名：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n  students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  classes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  classes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name cname\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("要使用 "),a("code",[s._v("表名.列名")]),s._v(" 这样的方式来引用列和设置别名，比如 "),a("code",[s._v("students.id")]),s._v(" ，但这样书写太长太麻烦，可以给表设置别名来简化书写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cname\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("给 "),a("code",[s._v("students")]),s._v(" 表设置别名为 "),a("code",[s._v("s")]),s._v(", 给 "),a("code",[s._v("classes")]),s._v(" 表设置别名为 "),a("code",[s._v("c")]),s._v(" 。")]),s._v(" "),a("p",[s._v("这种没有联结条件（"),a("code",[s._v("WHERE")]),s._v(" 子句）的多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是两个表的行数的乘积，对两个各自有 100 行记录的表进行笛卡尔查询将返回 10000 条记录，对两个各自有 1 万行记录的表进行笛卡尔查询将返回 1 亿条记录。")]),s._v(" "),a("p",[s._v("所以，应该保证所有联结都有 WHERE 子句，否则MySQL将返回比想要的数据多得多的数据。同理，应该保证 WHERE 子句的正确性。不正确的过滤条件将导致MySQL返回不正确的数据。")]),s._v(" "),a("p",[s._v("给多表查询添加条件语句：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询 students 中 gender 值为 'M', 并且 classes 表中 id 值为 1 的信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" sid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" cname\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" classes c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gender "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'M'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"联结查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联结查询"}},[s._v("#")]),s._v(" 联结查询")]),s._v(" "),a("p",[s._v("联结查询是另一种类型的多表查询。联结查询对多个表进行 "),a("code",[s._v("JOIN")]),s._v(" 运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“联结”在主表结果集上。")]),s._v(" "),a("p",[s._v("先举个例子：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询出 students 表的所有学生信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面查出的学生信息中，没有班级名称，只有班级的 "),a("code",[s._v("class_id")]),s._v("，如果要查出对应的班级名称，要先根据 "),a("code",[s._v("students")]),s._v(" 表的 "),a("code",[s._v("class_id")]),s._v(" ，找到 "),a("code",[s._v("classes")]),s._v(" 表对应的行，再取出 "),a("code",[s._v("name")]),s._v(" 列，才可以获得班级名称。")]),s._v(" "),a("p",[s._v("但是用联结查询就比较简单：")]),s._v(" "),a("p",[s._v("语法：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("主表"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("联结表"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中，"),a("code",[s._v("ON <条件>")]),s._v(" 子句就是 "),a("code",[s._v("JOIN")]),s._v(" 的条件子句，相当于 "),a("code",[s._v("WHERE")]),s._v(" 对于 "),a("code",[s._v("SELECT")]),s._v("，或是 "),a("code",[s._v("HAVING")]),s._v(" 对于 "),a("code",[s._v("GROUP BY")]),s._v(" 的意义。")]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("score\n  c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" class_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" s\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" classes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" c\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("注意 "),a("code",[s._v("INNER JOIN")]),s._v(" 查询的写法是：")]),s._v(" "),a("ol",[a("li",[s._v("先确定主表，仍然使用 "),a("code",[s._v("FROM <主表>")]),s._v(" 的语法；")]),s._v(" "),a("li",[s._v("再确定需要联结的表，使用 "),a("code",[s._v("INNER JOIN <联结表>")]),s._v(" 的语法；")]),s._v(" "),a("li",[s._v("然后确定联结条件，使用 "),a("code",[s._v("ON <条件...>")]),s._v(" ，这里的条件是 "),a("code",[s._v("s.class_id = c.id")]),s._v(" ，表示 "),a("code",[s._v("students")]),s._v(" 表的 "),a("code",[s._v("class_id")]),s._v(" 列与 "),a("code",[s._v("classes")]),s._v(" 表的 "),a("code",[s._v("id")]),s._v(" 列相同的行需要联结；")]),s._v(" "),a("li",[s._v("可选：加上 "),a("code",[s._v("WHERE")]),s._v(" 子句、 "),a("code",[s._v("ORDER BY")]),s._v(" 等子句。")])]),s._v(" "),a("p",[s._v("联结方式：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("INNER JOIN")]),s._v(" 只选取主表和联结表都存在的记录")]),s._v(" "),a("li",[a("code",[s._v("LEFT OUTER JOIN")]),s._v(" 选取主表的全部记录，联结表没有对应值时补 "),a("code",[s._v("NULL")])]),s._v(" "),a("li",[a("code",[s._v("RIGHT OUTER JOIN")]),s._v(" 选取联结表的全部记录，主表没有对应值时补 "),a("code",[s._v("NULL")])]),s._v(" "),a("li",[a("code",[s._v("FULL OUTER JOIN")]),s._v(" 选取主表和联结表的全部记录，没有的都补 "),a("code",[s._v("NULL")])])]),s._v(" "),a("p",[a("code",[s._v("JOIN")]),s._v(" 查询需要先确定主表，然后把另一个表的数据“附加”到结果集上，"),a("code",[s._v("INNER JOIN")]),s._v(" 是最常用的一种JOIN查询。")]),s._v(" "),a("p",[s._v("注意，尽管使用 "),a("code",[s._v("WHERE")]),s._v(" 子句定义联结的确比较简单，但是使用明确的联结语法能够确保不会忘记给出联结条件。")]),s._v(" "),a("p",[s._v("联结注意事项：")]),s._v(" "),a("ul",[a("li",[s._v("注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。")]),s._v(" "),a("li",[s._v("保证使用正确的联结条件，否则将返回不正确的数据。")]),s._v(" "),a("li",[s._v("应该总是提供联结条件，否则会得出笛卡儿积。")]),s._v(" "),a("li",[s._v("在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障排除更为简单。")])]),s._v(" "),a("h2",{attrs:{id:"自联结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自联结"}},[s._v("#")]),s._v(" 自联结")]),s._v(" "),a("p",[s._v("自联结就是联结同一张表进行查询。")]),s._v(" "),a("p",[s._v("比如，在一张存储了全校学生的 "),a("code",[s._v("students")]),s._v(" 表中，现在只知道一个同学的 "),a("code",[s._v("id")]),s._v(" 为 "),a("code",[s._v("123456")]),s._v(" ，要根据这个同学的名字，找到他的所有同班同学的名字。")]),s._v(" "),a("p",[s._v("使用子查询来实现：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 子查询先根据同学的 student_id 找到班级 class_id,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 再根据 class_id 查找所有同学")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" student_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" student_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" class_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" class_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" student_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("使用自联结来实现：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# SELECT 需要之后使用 完全限定列名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("student_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("student_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" students "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" students "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" s2\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_id\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("student_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("此查询中需要的两个表实际上是相同的表，因此 "),a("code",[s._v("students")]),s._v(" 表在 "),a("code",[s._v("FROM")]),s._v(" 子句中出现了两次。虽然这是完全合法的，但对 "),a("code",[s._v("students")]),s._v(" 的引用具有二义性，因为 MySQL 不知道你引用的是 "),a("code",[s._v("students")]),s._v(" 表中的哪个实例。")]),s._v(" "),a("p",[s._v("自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该试一下两种方法，以确定哪一种的性能更好。")]),s._v(" "),a("h2",{attrs:{id:"组合查询-union"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合查询-union"}},[s._v("#")]),s._v(" 组合查询 "),a("code",[s._v("UNION")])]),s._v(" "),a("p",[s._v("可用 "),a("code",[s._v("UNION")]),s._v(" 操作符来组合数条 SQL 查询。利用 "),a("code",[s._v("UNION")]),s._v(" ，可给出多条 "),a("code",[s._v("SELECT")]),s._v(" 语句，将它们的结果组合成单个结果集。")]),s._v(" "),a("p",[s._v("语法：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("code",[s._v("UNION")]),s._v(" 组合的多条查询语句中，如果某一行能满足多条查询语句，它只会返回一次，默认会将重复的行给去除，如果不想去除重复的行，可以使用 "),a("code",[s._v("UNION ALL")]),s._v(" 指明。")]),s._v(" "),a("p",[s._v("通常来说，"),a("code",[s._v("WHERE")]),s._v(" 子句中使用多个条件的语句，都能改写成 "),a("code",[s._v("UNION")]),s._v(" 语句，反之相同（仅 "),a("code",[s._v("UNION ALL")]),s._v(" 不能改写成 "),a("code",[s._v("WHERE")]),s._v(" 子句）。")]),s._v(" "),a("p",[s._v("比如，查询用户表中，年龄大于 30 岁的用户，同时还想查询所有年龄的姓 "),a("code",[s._v("王")]),s._v(" 的用户：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# WHERE 多条件写法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# UNION 语句写法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNION")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("在这个简单的例子中，使用 UNION 可能比使用 WHERE 子句更为复杂。但对于更复杂的过滤条件，或者从多个表（而不是单个表）中检索数据的情形，使用 UNION 可能会使处理更简单。")]),s._v(" "),a("p",[s._v("UNION 使用规则：")]),s._v(" "),a("ul",[a("li",[s._v("UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔（因此，如果组合4条 SELECT 语句，将要使用3个UNION 关键字）。")]),s._v(" "),a("li",[s._v("UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。")]),s._v(" "),a("li",[s._v("列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。")]),s._v(" "),a("li",[s._v("UNION 组合多条查询语句时，只能在最后一条语句后使用 "),a("code",[s._v("ORDER BY")]),s._v(" 进行排序，不允许使用多条 ORDER BY 子句，虽然 ORDER BY 子句似乎只是最后一条 SELECT 语句的组成部分，但实际上MySQL将用它来排序所有 SELECT 语句返回的所有结果。")])]),s._v(" "),a("h2",{attrs:{id:"全文本搜索查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全文本搜索查询"}},[s._v("#")]),s._v(" 全文本搜索查询")]),s._v(" "),a("p",[s._v("MySQL 支持几种基本的数据库引擎。并非所有的引擎都支持本书所描述的全文本搜索。两个最常使用的引擎为 MyISAM 支持，InnoDB 则不支持。所以需要全文本搜索的表要使用支持的引擎 。")]),s._v(" "),a("p",[s._v("虽然有 "),a("code",[s._v("LIKE")]),s._v(" 和 "),a("code",[s._v("REGEXP")]),s._v(" 可以用来写出足够复杂的匹配模式，但是有以下限制：")]),s._v(" "),a("ul",[a("li",[s._v("性能： 通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。")]),s._v(" "),a("li",[s._v("明确控制： 使用通配符和正则表达式匹配，很难（而且并不总是能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。")]),s._v(" "),a("li",[s._v("智能化的结果： 虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。例如，一个特殊词的搜索将会返回包含该词的所有行，而不区分包含单个匹配的行和包含多个匹配的行（按照可能是更好的匹配来排列它们）。类似，一个特殊词的搜索将不会找出不包含该词但包含其他相关词的行。")])]),s._v(" "),a("p",[s._v("所有这些限制以及更多的限制都可以用全文本搜索来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地决定哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。")]),s._v(" "),a("h3",{attrs:{id:"使用全文本搜索-fulltext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用全文本搜索-fulltext"}},[s._v("#")]),s._v(" 使用全文本搜索 "),a("code",[s._v("FULLTEXT")])]),s._v(" "),a("p",[s._v("为了进行全文本搜索，必须索引被搜索的列，而且要随着数据的改变不断地重新索引。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。在索引之后， "),a("code",[s._v("SELECT")]),s._v(" 可与 "),a("code",[s._v("Match()")]),s._v(" 和 "),a("code",[s._v("Against()")]),s._v(" 一起使用以实际执行搜索。")]),s._v(" "),a("p",[s._v("可以在创建表时指定 "),a("code",[s._v("FULLTEXT")]),s._v(" 启用全文本搜索，也可以在创建表之后启用（在这种情况下所有已有数据必须立即索引）。但不要在导入数据时启用索引，意思是在所有数据导入完成后再启用索引，而不是导入前开启，这会导致导入的每一行都分别进行索引，每行进行索引总耗时会大于一次性进行索引。")]),s._v(" "),a("p",[s._v("创建表时启用全文本搜索：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("数据类型"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("约束"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("约束"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("数据类型"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("约束"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("约束"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  FULLTEXT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("如上例，使用 "),a("code",[s._v("FULLTEXT(<列名1>, <列名2>, ...)")]),s._v(" 指定要使用全文本搜索的列，MySQL 根据此语句会对它进行索引，并自动维护该索引，在增加、更新或删除行时，索引会随之自动更新。")]),s._v(" "),a("p",[s._v("表开启索引之后，在查询时，使用两个函数 "),a("code",[s._v("Match()")]),s._v(" 和 "),a("code",[s._v("Against()")]),s._v(" 执行全文本搜索，其中 "),a("code",[s._v("Match()")]),s._v(" 指定要搜索的列名，"),a("code",[s._v("Against()")]),s._v(" 指定要使用的搜索表达式。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MATCH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("搜索表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("比如，用户表中的个人简介 "),a("code",[s._v("user_intro")]),s._v(" 一列开启全文本搜索：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  user_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  user_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  user_intro "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("140")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  FULLTEXT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_intro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("查询时，使用全文本搜索：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_intro\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MATCH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_intro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'music'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("注意事项：")]),s._v(" "),a("ul",[a("li",[s._v("传递给 "),a("code",[s._v("Match()")]),s._v(" 的值必须与 "),a("code",[s._v("FULLTEXT()")]),s._v(" 定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。")]),s._v(" "),a("li",[s._v("全文本搜索不区分大小写，除非使用 "),a("code",[s._v("BINARY")]),s._v(" 关键字开启区分大小写。")])]),s._v(" "),a("p",[s._v("上例中的查询语句其实用 "),a("code",[s._v("LIKE")]),s._v(" 语句也能实现：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_intro\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" user_intro "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%music%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("都能实现效果，全文本搜索有什么优势呢？")]),s._v(" "),a("p",[s._v("全文本搜索的一个重要部分就是对结果排序。具有较高等级的行会排前面，因为这些行很可能是你真正想要的行。")]),s._v(" "),a("p",[s._v("比如，有行数据的 "),a("code",[s._v("user_intro")]),s._v(" 都包含 "),a("code",[s._v("music")]),s._v(" 这个词，其中一行出现在第 3 个词的位置，另一行出现在第 20 个词的位置，全文本搜索会将出现位置靠前的那一行数据排在前面， LIKE 语句不会进行这样的排序。")]),s._v(" "),a("p",[s._v("全文本搜索的数据排序还会考虑行中词的数目、唯一词的数目、整个索引中词的总数，以及包含该词的行的数目等，计算出来一个权重值进行排序。")]),s._v(" "),a("p",[s._v("查看一个表中，全文本搜索每一行的权重，可以将 "),a("code",[s._v("Match()")]),s._v(" 和 "),a("code",[s._v("Against()")]),s._v(" 放在 SELECT 子句中，这样该表达式会返回当前行的权重值：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MATCH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_intro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'music'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" rank_value\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上例查询结果中，除了 "),a("code",[s._v("user_id")]),s._v(" 和 "),a("code",[s._v("user_name")]),s._v(" 外，第三个数据 "),a("code",[s._v("rank_value")]),s._v(" 就是全文本搜索计算出的权重值，搜索不到关键词的权重值就是 "),a("code",[s._v("0")]),s._v("。")]),s._v(" "),a("p",[s._v("所以在 "),a("code",[s._v("WHERE")]),s._v(" 语句中全文本搜索时，权重值为 0 的被排除，权重值大于 0 的按降序排列。")]),s._v(" "),a("h3",{attrs:{id:"扩展全文本搜索-with-query-expansion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展全文本搜索-with-query-expansion"}},[s._v("#")]),s._v(" 扩展全文本搜索 "),a("code",[s._v("WITH QUERY EXPANSION")])]),s._v(" "),a("p",[s._v("比如想搜索一个词，除了完整包含这个词的数据外，还想查出和这个词相关的数据。利用查询扩展，能找出可能相关的结果，即使它们并不精确包含所查找的词。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MATCH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("搜索表达式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" QUERY EXPANSION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("不使用查询扩展 "),a("code",[s._v("WITH QUERY EXPANSION")]),s._v(" 时，查询结果中，每条数据都完整包含搜索词，不完整包含的不会出现在结果中。")]),s._v(" "),a("p",[s._v("使用了查询扩展时，完整包含搜索词的结果优先级更高，会排在前面，其他相关的结果会排在后面，比如某行数据不完整包含搜索词，但包含前面已经完整包含搜索词的行数据中的几个词。")]),s._v(" "),a("h3",{attrs:{id:"布尔文本搜索-in-boolean-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔文本搜索-in-boolean-mode"}},[s._v("#")]),s._v(" 布尔文本搜索 "),a("code",[s._v("IN BOOLEAN MODE")])]),s._v(" "),a("p",[s._v("MySQL支持全文本搜索的另外一种形式，称为布尔方式（boolean mode）。以布尔方式，可以提供关于如下内容的细节：")]),s._v(" "),a("ul",[a("li",[s._v("要匹配的词；")]),s._v(" "),a("li",[s._v("要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；")]),s._v(" "),a("li",[s._v("排列提示（指定某些词比其他词更重要，更重要的词等级更高）；")]),s._v(" "),a("li",[s._v("表达式分组；")]),s._v(" "),a("li",[s._v("另外一些内容")])]),s._v(" "),a("p",[s._v("即使没有 "),a("code",[s._v("FULLTEXT")]),s._v(" 索引也可以使用布尔方式，不同于迄今为止使用的全文本搜索语法的地方在于，即使没有定义 "),a("code",[s._v("FULLTEXT")]),s._v(" 索引，也可以使用它。但这是一种非常缓慢的操作（其性能将随着数据量的增加而降低）。")]),s._v(" "),a("p",[s._v("比如，想要匹配包含 "),a("code",[s._v("'singing'")]),s._v(" 这个词，但不包含以 "),a("code",[s._v("'play'")]),s._v(" 开始的词（如 "),a("code",[s._v("'playing'")]),s._v("）的行，可使用以下查询：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MATCH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user_intro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'singing -play*'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BOOLEAN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上例中，用户简介中，包含 "),a("code",[s._v("'singing'")]),s._v(" 且不包含以 "),a("code",[s._v("play")]),s._v(" 开始的数据会被查询出来。")]),s._v(" "),a("p",[s._v("上例中，"),a("code",[s._v("Against()")]),s._v(" 中出现的 "),a("code",[s._v("-")]),s._v(", "),a("code",[s._v("*")]),s._v(" 叫做布尔操作符，支持的布尔操作符有：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("操作符")]),s._v(" "),a("th",[s._v("含义")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("+词")])]),s._v(" "),a("td",[s._v("包含，词必须存在")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("-词")])]),s._v(" "),a("td",[s._v("排除，词必须不出现")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v(">词")])]),s._v(" "),a("td",[s._v("包含，而且增加等级值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("<词")])]),s._v(" "),a("td",[s._v("包含，且减少等级值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("(子表达式)")])]),s._v(" "),a("td",[s._v("把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("~词")])]),s._v(" "),a("td",[s._v("取消一个词的排序值")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("*")])]),s._v(" "),a("td",[s._v("词尾的通配符")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v('"短语"')])]),s._v(" "),a("td",[s._v("定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）")])])])]),s._v(" "),a("p",[s._v("布尔操作符示例：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# + 必须包含 music 和 movie 这两个词")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+music +movie'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BOOLEAN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 没有布尔操作符，包含 music 或 movie 其中一词即可")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'music movie'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BOOLEAN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "music movie" 匹配一个短语，而不是两个词')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"music movie\"'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BOOLEAN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必须包含 music 和 movie 这两个词，但是降低 movie 的优先级")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" Against"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+music +(<movie)'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BOOLEAN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("需要注意的是，在布尔方式中，不会按等级值降序排序返回的行。")]),s._v(" "),a("h3",{attrs:{id:"全文本搜索注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全文本搜索注意事项"}},[s._v("#")]),s._v(" 全文本搜索注意事项")]),s._v(" "),a("ul",[a("li",[s._v("在索引全文本数据时，具有 3 个或 3 个以下字符的短词会被忽略且从索引中排除，如果需要，这个数目可以更改。")]),s._v(" "),a("li",[s._v("MySQL 带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时会被忽略，可自己修改。")]),s._v(" "),a("li",[s._v("如果一个词出现的频率很高，搜索它们没有用处，MySQL规定了一条50%规则，如果一个词出现在 50% 以上的行中，则将它作为一个非用词忽略。50%规则不用于 "),a("code",[s._v("IN BOOLEAN MODE")]),s._v(" 。")]),s._v(" "),a("li",[s._v("如果表中的行数少于 3 行，则全文本搜索不返回结果（因为每个词或者不出现，或者至少出现在 50% 的行中）。")]),s._v(" "),a("li",[s._v("忽略词中的单引号。例如， don't 索引为 dont 。")]),s._v(" "),a("li",[s._v("不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。")]),s._v(" "),a("li",[s._v("仅在 MyISAM 数据库引擎中支持全文本搜索。")]),s._v(" "),a("li",[s._v("MySQL全文本搜索现在还不支持邻近操作符（能搜索相邻的词（在相同的句子中、相同的段落中或者在特定数目的词的部分中，等等））。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);